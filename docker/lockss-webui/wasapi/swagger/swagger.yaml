---
swagger: "2.0"
info:
  description: "WASAPI Export API.  A draft of the minimum that a Web Archiving Systems\
    \ API server must implement.\n"
  version: "0.1.0"
  title: "WASAPI Export API"
  contact:
    name: "Jefferson Bailey and Mark Sullivan"
    url: "https://github.com/WASAPI-Community/data-transfer-apis"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/v0"
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /jobs:
    get:
      tags:
      - "default"
      summary: "Show the jobs on this server accessible to the client"
      operationId: "controllers.default_controller.jobs_get"
      parameters: []
      responses:
        200:
          description: "The list of jobs"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Job"
    post:
      tags:
      - "default"
      operationId: "controllers.default_controller.jobs_post"
      parameters:
      - name: "query"
        in: "formData"
        description: "URL-encoded query as appropriate for /webdata end-point"
        required: false
        type: "string"
      - name: "function"
        in: "formData"
        description: "An implementation-specific identifier for some function the\
          \ implementation supports\n"
        required: false
        type: "string"
      - name: "parameters"
        in: "formData"
        description: "Other parameters specific to the function and implementation\
          \ (URL-encoded).  For example: level of compression, priority, time limit,\
          \ space limit.\n"
        required: false
        type: "string"
      responses:
        201:
          description: "Job was successfully submitted.  Body is the submitted job.\n"
          schema:
            $ref: "#/definitions/Job"
        400:
          description: "The request could not be interpreted"
        401:
          description: "The Request was unauthorized"
  /jobs/{jobToken}:
    get:
      tags:
      - "default"
      summary: "Retrieve status for job"
      operationId: "controllers.default_controller.jobs_job_token_get"
      parameters:
      - name: "jobToken"
        in: "path"
        description: "The job token returned from previous request"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Job"
        400:
          description: "The request could not be interpreted"
        401:
          description: "The Request was unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "No such job"
        410:
          description: "Gone / invalidated.  Body may include non-result information\
            \ about the job.\n"
  /webdata:
    get:
      tags:
      - "default"
      operationId: "controllers.default_controller.webdata_get"
      parameters:
      - name: "filename"
        in: "query"
        description: "A semicolon-separated list of globs.  In each glob, a star `*`\
          \ matches any string of characters, and a question mark `?` matches exactly\
          \ one character.  Are the globs matched against the full pathname (ie with\
          \ directories) vs just the basename?, and if pathname, is the slash `/`\
          \ specially matched (cf `**`)?\n"
        required: false
        type: "string"
      - name: "content-type"
        in: "query"
        description: "A semicolon-separated list of acceptable MIME-types"
        required: false
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/inline_response_200"
        400:
          description: "The request could not be interpreted"
        401:
          description: "The Request was unauthorized"
definitions:
  WebdataFile:
    type: "object"
    required:
    - "checksum"
    - "content-type"
    - "filename"
    - "locations"
    properties:
      filename:
        type: "string"
        description: "The name of the webdata file"
      content-type:
        type: "string"
        description: "The MIME-type for the webdata file, eg `application/warc`, `application/pdf`\n"
      checksum:
        type: "string"
        description: "Checksum for the webdata file, eg \"sha1:beefface09781234897\"\
          , \"md5:dad0dada09823098\"\n"
      size:
        type: "integer"
        format: "int64"
        description: "The size in bytes of the webdata file"
      locations:
        type: "array"
        description: "A list of (mirrored) sources from which to retrieve (identical\
          \ copies of) the webdata file, eg \"http://archive.org/...\", \"/ipfs/Qmee6d6b05c21d1ba2f2020fe2db7db34e\"\
          \n"
        items:
          type: "string"
          format: "url"
    description: "The unit of distribution of web archival data.  Examples: a WARC\
      \ file, an ARC file, a CDX file, a WAT file, a DAT file, a tarball.\n"
  WebdataBundle:
    type: "array"
    description: "A \"bundle\" of webdata files that together satisfy a query, job,\
      \ etc\n"
    items:
      $ref: "#/definitions/WebdataFile"
  WebdataMenu:
    type: "array"
    description: "A set of alternative webdata bundles, each of which satisfies a\
      \ given query, job, etc.  An implementation may offer a different bundle (with\
      \ differing number of webdata files) for each of its available transports, etc.\n"
    items:
      $ref: "#/definitions/WebdataBundle"
  Job:
    type: "object"
    required:
    - "function"
    - "jobtoken"
    - "query"
    - "state"
    - "submit-time"
    properties:
      jobtoken:
        type: "string"
        description: "Identifier unique across the implementation.  The implementation\
          \ chooses the format.  For example: GUID, increasing integer.\n"
      function:
        type: "string"
        description: "eg `build-WAT`, `build-index`"
      query:
        type: "string"
        description: "The specification of what webdata to include in the job.  Encoding\
          \ is URL-style, eg `param=value&otherparam=othervalue`.\n"
      submit-time:
        type: "string"
        format: "date-time"
        description: "Time of submission, formatted according to RFC3339"
      state:
        type: "string"
        description: "Implementation-defined, eg `queued`, `running`, `failed`, `complete`,\
          \ `gone`\n"
    description: "A submitted job with optional results"
  inline_response_200:
    properties:
      includes-extra:
        type: "boolean"
      files:
        $ref: "#/definitions/WebdataMenu"
