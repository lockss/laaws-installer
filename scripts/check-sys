#!/usr/bin/env bash
# ---------------------------------------------------------------------------
# check-sys - Check the host system for all necessary components for running LOCKSS stack.
#
# Copyright (c) 2000-2019, Board of Trustees of Leland Stanford Jr. University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# Usage: check-sys [-h|--help]

# Revision history:
# ---------------------------------------------------------------------------

PROGNAME=${0##*/}
VERSION="1.0"
##
## Relative paths
##
_0=$(basename "${0}")
_D0=$(dirname "${0}")
##
## Load _util
##

. "${_D0}/_util"

OS_TYPE=$(uname -s)
LOCKSS_USER=lockss
LOCAL_HOSTNAME=$(uname -n)
K8S_CONF_FILE="${CONFIG_DIR}/k8s.cfg"

clean_up() { # Perform pre-exit housekeeping
  return
}

error_exit() {
  echo -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
  clean_up
  exit 1
}

graceful_exit() {
  clean_up
  exit
}

signal_exit() { # Handle trapped signals
  case $1 in
  INT)
    error_exit "Program interrupted by user"
    ;;
  TERM)
    echo -e "\n$PROGNAME: Program terminated" >&2
    graceful_exit
    ;;
  *)
    error_exit "$PROGNAME: Terminating on unknown signal"
    ;;
  esac
}

usage() {
  echo -e "Usage: $PROGNAME [-h|--help]"
}

help_message() {
  cat <<-_EOF_
  $PROGNAME ver. $VERSION
  Check the host system for all necessary components for running LOCKSS stack.

  $(usage)

  Options:
  -h, --help  Display this help message and exit.

  NOTE: You must be the superuser to run this script.

_EOF_
  return
}

ensure_lockss_user() {
  case ${OS_TYPE} in
  Linux)
    if ! id "lockss" &>/dev/null; then
      echo "${_0}: There is no 'lockss' user account."
      error_exit "Please create a lockss user account"
    fi
    ;;
  Darwin)
    if [ $(dscl . -list /Users | grep "lockss" | wc -l) = 0 ]; then
      echo "${_0}: There is no 'lockss' user account."
      error_exit "Please create a lockss user account"
    fi
    ;;
  *)
    error_exit "Unsupported system, create the user lockss in group lockss manually."
    ;;
  esac
}

ensure_kubernetes() {
  KUBECTL_CMD=""
  # look for the k8s.cfg file and use it if possible
  if [ -r "${K8S_CONF_FILE}" ]; then
    read_config ${K8S_CONF_FILE}
  else
    err "${K8S_CONF_FILE} file does not exist, looking for kubectl command on path..."
  fi
  Check_K8S_COMMAND || error_exit "No kubectl command available on path."

  if ! ${KUBECTL_CMD} get node | grep -q "Ready"; then
    err "${_0}: No available kubernetes node. Please start kubernetes node"
  fi
  ${KUBECTL_CMD} get pod coredns -n kube-system || err "coredns is not available for pod communication"
}

# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT" INT

# Parse command-line
while [[ -n $1 ]]; do
  case $1 in
  -h | --help)
    help_message
    graceful_exit
    ;;
  -* | --*)
    usage
    error_exit "Unknown option $1"
    ;;
  *)
    echo "Argument $1 to process..."
    ;;
  esac
  shift
done

# Main logic
echo "${_0}: Checking for lockss user..."
ensure_lockss_user
echo "${_0}: User lockss exists."
echo "${_0}: Checking for kubernetes..."
ensure_kubernetes
echo "${_0}: kubernetes is installed and has a active node."
echo "${_0}: The lockss user has appropriate permissions.."
graceful_exit
