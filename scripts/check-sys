#!/bin/bash
# ---------------------------------------------------------------------------
# check-sys - Check the host system for all necessary components for running LOCKSS stack.
#
# Copyright (c) 2000-2019, Board of Trustees of Leland Stanford Jr. University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# Usage: check-sys [-h|--help]

# Revision history:
# ---------------------------------------------------------------------------

PROGNAME=${0##*/}
VERSION="1.0"
##
## Relative paths
##
_0=$(basename "${0}")
_D0=$(dirname "${0}")
##
## Load _util
##

. "${_D0}/_util"

OS_TYPE=$(uname -s)
LOCKSS_USER=lockss
SOLR_USER=solr
LOCAL_HOSTNAME=$(uname -n)

clean_up() { # Perform pre-exit housekeeping
  return
}

error_exit() {
  echo -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
  clean_up
  exit 1
}

graceful_exit() {
  clean_up
  exit
}

signal_exit() { # Handle trapped signals
  case $1 in
  INT)
    error_exit "Program interrupted by user"
    ;;
  TERM)
    echo -e "\n$PROGNAME: Program terminated" >&2
    graceful_exit
    ;;
  *)
    error_exit "$PROGNAME: Terminating on unknown signal"
    ;;
  esac
}

usage() {
  echo -e "Usage: $PROGNAME [-h|--help]"
}

help_message() {
  cat <<-_EOF_
  $PROGNAME ver. $VERSION
  Check the host system for all necessary components for running LOCKSS stack.

  $(usage)

  Options:
  -h, --help  Display this help message and exit.

  NOTE: You must be the superuser to run this script.

_EOF_
  return
}

ensure_lockss_user() {
  case ${OS_TYPE} in
  Linux)
    if ! id "lockss" &>/dev/null; then
      echo "${_0}: There is no 'lockss' user account."
      error_exit "Please create a lockss user account"
    fi
    ;;
  Darwin)
    if [ $(dscl . -list /Users | grep "lockss" | wc -l) = 0 ]; then
      echo "${_0}: There is no 'lockss' user account."
      error_exit "Please create a lockss user account"
    fi
    ;;
  *)
    error_exit "Unsupported system, create the user lockss in group lockss manually."
    ;;
  esac
}

ensure_snap() {
  local instr_link="https://lockss.github.io/administrators/manual/2.0-alpha3/installing/snap"
  if ! which snap &> /dev/null; then
      err "${_0}: Snap not found on path."
      err "${_0}: Snap is used to install microk8s."
        echo "To complete your install see: ${instr_link}"
  fi
}
ensure_microk8s() {
  local instr_link="https://lockss.github.io/administrators/manual/2.0-alpha3/installing/microk8s"
  if ! sudo -u $LOCKSS_USER which microk8s &> /dev/null; then
      err "${_0}: Mircok8s not found on the PATH (${PATH})"
      err "${_0}: LOCKSS requires Microk8s to run."
      error_exit "See instructions: ${instr_link}"
  fi
}

ensure_lockss_access() {
  local instr_link="https://lockss.github.io/administrators/manual/2.0-alpha3/installing/user"
  if ! sudo -l -U lockss sudo &> /dev/null; then
      err "${_0}: The lockss user requires sudo privileges."
      error_exit "See instructions: ${instr_link}"
  fi
  if !  grep '^microk8s:.*$' /etc/group | cut -d: -f4 | grep lockss &> /dev/null; then
      err "${_0}: The lockss user should be a member of the group 'microk8s'."
      error_exit "See instructions: ${instr_link}"
  fi
}

# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT" INT

# Parse command-line
while [[ -n $1 ]]; do
  case $1 in
  -h | --help)
    help_message
    graceful_exit
    ;;
  -* | --*)
    usage
    error_exit "Unknown option $1"
    ;;
  *)
    echo "Argument $1 to process..."
    ;;
  esac
  shift
done

# Main logic
echo "${_0}: Checking for lockss user..."
ensure_lockss_user
echo "${_0}: User lockss exists."
echo "${_0}: Checking snapd install..."
ensure_snap
echo "${_0}: snapd is installed."
echo "${_0}: Checking for microk8s..."
ensure_microk8s
echo "${_0}: microk8s is installed."
echo "${_0}: Checking lockss groups and permissions.."
ensure_lockss_access
graceful_exit
