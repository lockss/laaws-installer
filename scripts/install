#!/usr/bin/env bash

#!/bin/bash

# Copyright (c) 2000-2019, Board of Trustees of Leland Stanford Jr. University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
##
## Relative paths
##

_0=$(basename "${0}")
_D0=$(dirname "${0}")

##
## Load _util
##

. "${_D0}/_util"

##
## Definitions
##

# Directories
COMPOSE_DIR="${_D0}/.."
CONFIG_DIR="${_D0}/../config"
DOCKER_CONFIGS_DIR="${CONFIG_DIR}/configs"
TEMPLATES_DIR="${CONFIG_DIR}/templates"

# Files
DOCKER_COMPOSE_FILE="${COMPOSE_DIR}/docker-compose.yml"
ENV_FILE="${CONFIG_DIR}/env.sh"
EMPTY_LOCKSS_TXT="${TEMPLATES_DIR}/blank_lockss.txt"
EMPTY_LOCKSS_OPT="${TEMPLATES_DIR}/blank_lockss.opt"

#Data
declare -a arr svcs=( "cfg" "mdq" "mdx" "pol" "repo" "postgres" "solr" "hdfs" "pywb")
declare -a arr global_confs=("lockss_cluster" "lockss_bootstrap" "repo_properties")
declare -a arr service_confs=("cfg" "mdq" "mdx" "pol")

# $1=file $2=blankfile
Config_Or_Blank()
{
  if [ -f "${DOCKER_CONFIGS_DIR}/${1}" ]; then
    echo "${DOCKER_CONFIGS_DIR}/${1}"
  else
    echo "${DOCKER_CONFIGS_DIR}/${2}"
  fi
}

##
## MAIN
##

# Source config.info and env.sh
set -a
. "${CONFIG_DIR}/config.info"
. "${ENV_FILE}"
CFG_URL="http://${LOCKSS_ADMIN_USER}:$(cat "${CONFIG_DIR}/ui.sec")@${CFG_HOST}:${CFG_REST_PORT}"
set +a

# Sanity checks
Check_Installed 'docker'
Check_Docker
Check_Stack

if [ -z "${LOCKSS_DATA_DIR}" ] || [ -z "${LOCKSS_LOGS_DIR}" ]; then
  echo "LOCKSS_DATADIR and LOCKSS_LOGS_DIR are not set; exiting"
  exit 1
fi

# Create our secret
docker secret rm postgres_pass
echo "creating docker secret for postgres password..."
if ! docker secret create postgres_pass "${CONFIG_DIR}/postgres.sec" ; then
  echo "${_0}: error creating secret postgres_pass"
  exit 1
fi

# Create the global configs
for gconf in "${global_confs[@]}"
do
  docker config rm ${gconf}
  echo "creating docker config for global conf ${gconf}..."
  if ! docker config create --template-driver golang ${gconf} $(Config_Or_Blank ${gconf} "blank_lockss") ; then
    echo "${_0}: error creating config ${gconf}"
    exit 1
  fi
done

# Create the configs for each lockss service
for sconf in "${service_confs[@]}"
do
  echo "creating docker config for conf ${sconf}..."
  docker config rm ${sconf}_service ${sconf}_service_opt
  if ! docker config create --template-driver golang ${sconf}_service $(Config_Or_Blank ${sconf}_service "blank_lockss") ; then
    echo "${_0}: error creating config ${sconf}_service"
    exit 1
  fi
  if ! docker config create --template-driver golang ${sconf}_service_opt $(Config_Or_Blank ${sconf}_service_opt "blank_lockss_opt") ; then
    echo "${_0}: error creating config ${sconf}_service_opt"
    exit 1
  fi
done

# Create a mount points for each service
for svc in "${svcs[@]}"
do
  echo "creating docker data and log volumes for ${svc}..."
  if ! docker volume create -d local-persist -o mountpoint=${LOCKSS_DATA_DIR}/lockss-${svc}-data --name=lockss-${svc}-data ; then
    echo "${_0}: error creating volume lockss-${svc}-data"
    exit 1
  fi
  if ! docker volume create -d local-persist -o mountpoint=${LOCKSS_LOGS_DIR}/lockss-${svc}-logs --name=lockss-${svc}-logs ; then
    echo "${_0}: error creating volume lockss-${svc}-logs"
    exit 1
  fi
done

# Create a lockss network
echo "Creating lockss network"
docker network remove lockss-network
if ! docker network create -d overlay --opt encrypted --attachable lockss-network; then
  echo "lockss-network: error creating network."
  exit 1
fi

echo "Successfully installed Docker Secrets, Configs and Volumes and Networks."