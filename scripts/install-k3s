#!/usr/bin/env bash
#---------------------------------------------------------------------------
# k3s-installers - Collect configuration information to build config and
# resolv.conf file before calling the k3s installer.
# Copyright (c) 2019, Board of Trustees of Leland Stanford Jr. University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors10.233.231.99
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Usage: configure-lockss [-h|--help] [-s|--stacks]
#
# Revision history:
# ---------------------------------------------------------------------------

PROGNAME=${0##*/}
VERSION="1.0"

##
## Relative paths
##

_0=$(basename "${0}")
_D0=$(dirname "${0}")

##
## Load _util and mustache template support
##

. "${_D0}/_util"
. "${_D0}/lib/mo"

##
## Definitions
##
LOCKSS_ETC_DIR="/etc/lockss"
LOCKSS_RESOLV_CONF="$LOCKSS_ETC_DIR/resolv.conf"
RESOLV_CONF_CONFIG=''
K8S_CONF_FILE="${CONFIG_DIR}/k8s.cfg"

RESOLV_CONF_CONFIG=""
K8S_VERSION="1.20"
K3S_VERSION="v1.20.6+k3s1"
LOCKSS_USER="lockss"

clean_up() { # Perform pre-exit housekeeping
  return
}

error_exit() {
  echo -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
  clean_up
  exit 1
}

graceful_exit() {
  clean_up
  exit
}

signal_exit() { # Handle trapped signals
  case $1 in
  INT)
    error_exit "Program interrupted by user"
    ;;
  TERM)
    echo -e "\n$PROGNAME: Program terminated" >&2
    graceful_exit
    ;;
  *)
    error_exit "$PROGNAME: Terminating on unknown signal"
    ;;
  esac
}

usage() {
  echo -e "Usage: $PROGNAME [-h|--help]"
}

help_message() {
  cat <<-_EOF_
  $PROGNAME ver. $VERSION
  Deploy the lockss stacks to docker.

  $(usage)

  Options:
  -h, --help  Display this help message and exit.
_EOF_
  return
}

install_k3s() {
  if [ -r "${LOCKSS_RESOLV_CONF}" ] ; then
    RESOLV_CONF_CONFIG="--resolv-conf ${LOCKSS_RESOLV_CONF}"
  fi
  echo "${PROGNAME}: Installing K3s ${K3S_VERSION} (Kubernetes ${K8S_VERSION})..."
  curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION="${K3S_VERSION}" K3S_KUBECONFIG_MODE=644 sh -s - --disable traefik ${RESOLV_CONF_CONFIG}
}

check_k3s() {
  if k3s check-config; then
    echo "The configuration check completed successfully."
  else
    echo "The configuration check failed a test, please fix before running the lockss stack."
  fi
}


write_config() {
  set_k3s_bin_dir
  local f_name=${1}

  cat >"${f_name}" <<EOF
K8S_FLAVOR="k3s"
K8S_VERSION="${K8S_VERSION}"
K3S_VERSION="${K3S_VERSION}"
KUBECTL_CMD="${K3S_BIN_DIR}/k3s kubectl"
EOF
  if [ -n "${RESOLV_CONF_CONFIG}" ] ; then
    echo "RESOLV_CONF_CONFIG=\"${LOCKSS_RESOLV_CONF}\"" >>"${f_name}"
  fi
  $SUDO chown "${LOCKSS_USER}:${LOCKSS_USER}" "${f_name}" ||
      echo "Warning: the file ${f_name} is not owned by user lockss."
}

##
## MAIN
##

# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT" INT

umask 002

# Parse command-line
while [[ -n $1 ]]; do
  case $1 in
  -h | --help)
    help_message
    graceful_exit
    ;;
  -*)
    usage
    error_exit "Unknown option $1"
    ;;
  *)
    logger_debug "Argument $1 to process..."
    ;;
  esac
  shift
done

# --- use SUDO if we are not already root ---
SUDO='sudo'
if [ $(id -u) -eq 0 ]; then
    SUDO=''
fi

# Call configure-firewall
CONFIGURE_FIREWALL="${_D0}/configure-firewall"
if [ ! -x "${CONFIGURE_FIREWALL}" ] ; then
  error_exit "${CONFIGURE_FIREWALL} not found."
fi
$CONFIGURE_FIREWALL || error_exit "${CONFIGURE_FIREWALL} failed."

# Call configure-dns
CONFIGURE_DNS="${_D0}/configure-dns"
if [ ! -x "${CONFIGURE_DNS}" ] ; then
  error_exit "${CONFIGURE_DNS} not found."
fi
$CONFIGURE_DNS || error_exit "${CONFIGURE_DNS} failed."

echo "${PROGNAME}: Installing K3s..."
install_k3s || error_exit 'Attempt to install K3s failed.'

echo "${PROGNAME}: Writing configuration file..."
write_config ${K8S_CONF_FILE} || error_exit "Attempt to write ${K8S_CONF_FILE} failed."
