#!/usr/bin/env bash
#---------------------------------------------------------------------------
# k3s-installers - Collect configuration information to build config and
# resolv.conf file before calling the k3s installer.
# Copyright (c) 2019, Board of Trustees of Leland Stanford Jr. University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors10.233.231.99
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Usage: configure-lockss [-h|--help] [-s|--stacks]
#
# Revision history:
# ---------------------------------------------------------------------------

PROGNAME=${0##*/}
VERSION="1.0"

##
## Relative paths
##

_0=$(basename "${0}")
_D0=$(dirname "${0}")

##
## Load _util and mustache template support
##

. "${_D0}/_util"
. "${_D0}/lib/mo"

##
## Definitions
##
USE_RESOLV_CONF=Y
SYSD_RESOLV_CONF="/run/systemd/resolve/resolv.conf"
RESOLV_CONF="/etc/resolv.conf"
LOCKSS_ETC_DIR="/etc/lockss"
LOCKSS_RESOLV_CONF="$LOCKSS_ETC_DIR/resolv.conf"
K8S_CONF_FILE="${CONFIG_DIR}/k8s.cfg"

RESOLVE_CONF_CONFIG=""
K8S_VERSION="1.20"
K3S_VERSION="v1.20.6+k3s1"
LOCKSS_USER="lockss"

clean_up() { # Perform pre-exit housekeeping
  return
}

error_exit() {
  echo -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
  clean_up
  exit 1
}

graceful_exit() {
  clean_up
  exit
}

signal_exit() { # Handle trapped signals
  case $1 in
  INT)
    error_exit "Program interrupted by user"
    ;;
  TERM)
    echo -e "\n$PROGNAME: Program terminated" >&2
    graceful_exit
    ;;
  *)
    error_exit "$PROGNAME: Terminating on unknown signal"
    ;;
  esac
}

usage() {
  echo -e "Usage: $PROGNAME [-h|--help]"
}

help_message() {
  cat <<-_EOF_
  $PROGNAME ver. $VERSION
  Deploy the lockss stacks to docker.

  $(usage)

  Options:
  -h, --help  Display this help message and exit.
_EOF_
  return
}

configure_resolv_conf() {
  # examine the local resolv.conf for loopback address
  if has_loopback_resolver "${RESOLV_CONF}"; then
    if [ -f "$SYSD_RESOLV_CONF" ]; then
      if has_loopback_resolver "${SYSD_RESOLV_CONF}"; then
        USE_RESOLV_CONF=N
      fi
    else
      USE_RESOLV_CONF=N
    fi
  fi
  declare -a nameservers
  if ! is_yes ${USE_RESOLV_CONF}; then
    echo "The /etc/resolv.conf file in your system contains a loopback address."
    echo "CoreDNS does not allow a loopback address to be assigned to pods."
    echo "Please enter a list of IP addresses of upstream DNS resolvers."
    local IP_OK=N
    local DEFAULT_IP_LIST=
    if [ -r "$SYSD_RESOLV_CONF" ]; then
      DEFAULT_IP_LIST=$(extract_non_loopback_resolvers "$SYSD_RESOLV_CONF")
    fi
    if [ -z "$DEFAULT_IP_LIST" -a -r "$RESOLV_CONF" ]; then
      DEFAULT_IP_LIST=$(extract_non_loopback_resolvers "$RESOLV_CONF")
    fi

    until is_yes ${IP_OK}; do
      ask_for_input "IP address(es) of DNS resolvers, separated by ';'" "${DEFAULT_IP_LIST}"
      if valid_ip_address_list "${ANS}"; then
        IP_OK=Y
        # set IP addr array used in resolv.conf.mustache
        nameservers=("${VALIDATED_LIST[@]}")
      fi
    done

    src="${CONFIG_DIR}/templates/k3s/resolv.conf.mustache"
    $SUDO mkdir -p ${LOCKSS_ETC_DIR}
    dst="${CONFIG_DIR}/resolv.conf"
    echo "Rendering ${src} to ${dst}..."
    mo "${src}" > "${dst}"
    echo "Moving file to ${LOCKSS_RESOLV_CONF}"
    $SUDO cp "${dst}" "${LOCKSS_RESOLV_CONF}"
    RESOLV_CONF_CONFIG="--resolv-conf ${LOCKSS_RESOLV_CONF}"
  fi
}

install_k3s() {
  echo "${PROGNAME}: Using k3s ${K3S_VERSION} of kubernetes version ${K8S_VERSION}..."
  curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=${K3S_VERSION} K3S_KUBECONFIG_MODE=644 sh -s - --disable traefik ${RESOLVE_CONF_CONFIG}

}

check_k3s() {
  if k3s check-config; then
    echo "The configuration check completed successfully."
  else
    echo "The configuration check failed a test, please fix before running the lockss stack."
  fi
}


write_config() {
  set_k3s_bin_dir

  cat >"${1}" <<EOF
K8S_FLAVOR="k3s"
K8S_VERSION="${K8S_VERSION}"
K3S_VERSION="${K3S_VERSION}"
KUBECTL_CMD="${K3S_BIN_DIR}/k3s kubectl"
EOF
  if [ -n "${RESOLV_CONF_CONFIG}" ]; then
    echo "RESOLV_CONF_CONFIG=\"${LOCKSS_RESOLV_CONF}\""
  fi
#  ask_for_input ""User account used to run LOCKSS system?"" "${LOCKSS_USER}"
#  LOCKSS_USER=${ANS}
  lockss_uid=$(id -u "${LOCKSS_USER}")
  lockss_gid=$(id -g "${LOCKSS_USER}")

  if [ $(id -u) -ne ${lockss_uid} ]; then
    $SUDO chown $lockss_uid:$lockss_gid "${1}" ||
    echo "The file ${CONFIG_DIR}/k8s.cfg is not owned by lockss."
    echo "Please create lockss user and group and chown the file to lockss before running configure-lockss."
  fi
}

Adjust_Iptables()
{
  # Return if iptables is not on the PATH
  command -v iptables > /dev/null || return 0
  # Get the iptables version
  local line="$(iptables --version)"
  local ver="$(echo "${line}" | awk '{print $2;exit 0}' | tail -c +2)"
  # Return if the version is not 1.8.0 or later
  [ "$(echo "${ver}" | awk -F. '{print $1;exit 0}')" -ge 1 ] || return 0
  [ "$(echo "${ver}" | awk -F. '{print $2;exit 0}')" -ge 8 ] || return 0
  # Return if the mode is not nf_tables
  [ "$(echo "${line}" | awk '{print $3;exit 0}' | tr -d '()')" = 'nf_tables' ] || return 0
  # Return if update-alternatives is not on the PATH
  command -v update-alternatives  > /dev/null || return 0
  # Return if there are no symlinks matching /etc/alternatives/ip*tables*
  local alts="$(readlink /etc/alternatives/ip*tables*)" || return 0
  [ -n "${alts}" ] || return 0
  # Return if the first symlink is not executable or its mode is not nf_tables
  for alt in $alts ; do
    [ -x "${alt}" ] || return 0
    [ "$($alt --version | awk '{print $3;exit 0}' | tr -d '()')" = 'nf_tables' ] || return 0
    break
  done
  # Ask for permission
  echo
  echo "Your system is running iptables version 1.8.0 or later,"
  echo "in nf_tables mode, via the alternatives system. For K3s"
  echo "to work properly, it is necessary to switch iptables to"
  echo "legacy mode via the alternatives system."
  echo
  ask_for_input "Switch iptables to legacy mode via the alternatives system?" Y
  if ! is_yes "${ANS}" ; then
    echo "Leaving iptables unchanged."
    return 0
  fi
  # Perform change
  echo "Switching iptables to legacy mode via the alternatives system..."  
  $SUDO update-alternatives --set iptables /usr/sbin/iptables-legacy || return 1
  $SUDO update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy || return 1
  $SUDO iptables --flush || return 1
  echo "Done."
  return 0
}

Adjust_Firewalld()
{
  # Return if firewall-cmd is not on the PATH
  command -v firewall-cmd > /dev/null || return 0
  # Return if firewalld is not running
  [ "$($SUDO firewall-cmd --state 2>&1)" = 'running' ] || return 0
  # Ask for permission
  echo
  echo "Your system is running firewalld. For K3s to work properly,"
  echo "it is necessary to add 10.42.0.0/16 and 10.43.0.0/16 to"
  echo "firewalld's trusted zone."
  echo
  ask_for_input "Add 10.42.0.0/16 and 10.43.0.0/16 to firewalld's trusted zone?" Y
  if ! is_yes "${ANS}" ; then
    echo "Leaving firewalld unchanged."
    return 0
  fi
  # Perform change
  echo "Adding 10.42.0.0/16 and 10.43.0.0/16 to firewalld's trusted zone..."  
  $SUDO firewall-cmd --permanent --zone=trusted --add-source=10.42.0.0/16 || return 1
  $SUDO firewall-cmd --permanent --zone=trusted --add-source=10.43.0.0/16 || return 1
  $SUDO firewall-cmd --reload || return 1  
  echo "Done."
  return 0
}

Adjust_Ufw()
{
  # Return if ufw is not on the PATH
  command -v ufw > /dev/null || return 0
  # Return if ufw is not active
  [ "$($SUDO ufw status)" = 'Status: active' ] || return 0
  # Ask for permission
  echo
  echo "Your system is running ufw. For K3s to work properly,"
  echo "it is necessary to allow traffic from 10.42.0.0/16 and"
  echo "10.43.0.0/16 via ufw."
  echo
  ask_for_input "Allow traffic from 10.42.0.0/16 and 10.43.0.0/16 via ufw?" Y
  if ! is_yes "${ANS}" ; then
    echo "Leaving ufw unchanged."
    return 0
  fi
  # Perform change
  echo "Allowing traffic from 10.42.0.0/16 and 10.43.0.0/16 via ufw..."  
  $SUDO ufw allow from 10.42.0.0/16 to any || return 1
  $SUDO ufw allow from 10.43.0.0/16 to any || return 1
  $SUDO ufw reload || return 1  
  echo "Done."
  return 0
}

##
## MAIN
##

# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT" INT

umask 002

# Parse command-line
while [[ -n $1 ]]; do
  case $1 in
  -h | --help)
    help_message
    graceful_exit
    ;;
  -* | --*)
    usage
    error_exit "Unknown option $1"
    ;;
  *)
    logger_debug "Argument $1 to process..."
    ;;
  esac
  shift
done

# --- use SUDO if we are not already root ---
SUDO=sudo
if [ $(id -u) -eq 0 ]; then
    SUDO=
fi

echo "${PROGNAME}: Adjusting iptables if needed..."
Adjust_Iptables || error_exit "Attempt to adjust iptables failed."

echo "${PROGNAME}: Adjusting firewalld if needed..."
Adjust_Firewalld || error_exit "Attempt to adjust firewalld failed."

echo "${PROGNAME}: Adjusting ufw if needed..."
Adjust_Ufw || error_exit "Attempt to adjust ufw failed."

echo "${PROGNAME}: Setting resolv.conf for container dns usage..."
configure_resolv_conf || error_exit "Unable obtain valid resolv.conf information."

echo "${PROGNAME}: Installing k3s kubernetes..."
install_k3s || error_exit "Attempt to install k3s failed."

echo "${PROGNAME}: Writing configuration file..."
write_config ${K8S_CONF_FILE}|| error_exit "Attempt to write ${K8S_CONF_FILE} failed."
