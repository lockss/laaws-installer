#!/usr/local/bin/zsh
# ---------------------------------------------------------------------------
# check_sys - Check the host system for all necessary components for running LOCKSS stack.
#
# Copyright (c) 2000-2019, Board of Trustees of Leland Stanford Jr. University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# Usage: check_sys [-h|--help]

# Revision history:
# ---------------------------------------------------------------------------

PROGNAME=${0##*/}
VERSION="1.0"

clean_up() { # Perform pre-exit housekeeping
	return
}

error_exit() {
	echo -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
	clean_up
	exit 1
}

graceful_exit() {
	clean_up
	exit
}

signal_exit() { # Handle trapped signals
	case $1 in
		INT)
			error_exit "Program interrupted by user" ;;
		TERM)
			echo -e "\n$PROGNAME: Program terminated" >&2
			graceful_exit ;;
		*)
			error_exit "$PROGNAME: Terminating on unknown signal" ;;
	esac
}

usage() {
	echo -e "Usage: $PROGNAME [-h|--help]"
}

help_message() {
  cat <<- _EOF_
  $PROGNAME ver. $VERSION
  Check the host system for all necessary components for running LOCKSS stack.

  $(usage)

  Options:
  -h, --help  Display this help message and exit.

  NOTE: You must be the superuser to run this script.

_EOF_
  return
}

ensure_lockss_user() {
  grep -q ^lockss: /etc/passwd || ( if useradd -s /bin/false lockss ; then mkdir -p /home/lockss ; chown lockss:lockss /home/lockss ; chmod 755 /home/lockss ; echo "Created user 'lockss'" ; else echo "Can't create user lockss" ; exit 1 ; fi )
}

ensure_docker() {

}


ensure_persistent_plugin() {
  if ! docker volume create -d local-persist -o mountpoint=.config/lptest --name=lptest &> /dev/null ; then
    echo "${_0}: The local-persist volume plugin is not available."
    ask_for_input "OK to install local persist plugin." Y
    if is_yes "${ANS}"; then
      case `uname -s ` in
      Linux)
        curl -fsSL https://raw.githubusercontent.com/CWSpear/local-persist/master/scripts/install.sh | sudo bash
        ;;
      Darwin)
        local PLUGIN_DATA_PATH
        local DATA_VOLUME_PATH

        ask_for_input "Path to store plugin data" "${PLUGIN_DATA_PATH}"
          PLUGIN_DATA_PATH=${ANS}
        init_one_dir PLUGIN_DATA_PATH
        ask_for_input "Path to store persistant volume" "${DATA_VOLUME_PATH}"
          DATA_VOLUME_PATH=${ANS}
        init_one_dir DATA_VOLUME_PATH
        docker run -d \
        -v /run/docker/plugins/:/run/docker/plugins/ \
        -v $PLUGIN_DATA_PATH:/var/lib/docker/plugin-data/ \
        -v $DATA_VOLUME_PATH:$DATA_VOLUME_PATH \
          cwspear/docker-local-persist-volume-plugin
        ;;
      esac
    fi
  fi
}

ensure_docker_swarm() {
  if ! docker stack ls &> /dev/null ; then
    echo "${_0}: Docker Swarm is not inited"
    ask_for_input "OK to init swarm on this machine." Y
    if is_yes "${ANS}"; then
        docker swarm init --advertise-addr $LOCAL_IP
    fi
  fi
}

# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT"  INT

# Check for root UID
if [[ $(id -u) != 0 ]]; then
  error_exit "You must be the superuser to run this script."
fi

# Parse command-line
while [[ -n $1 ]]; do
  case $1 in
    -h | --help)
      help_message; graceful_exit ;;
    -* | --*)
      usage
      error_exit "Unknown option $1" ;;
    *)
      echo "Argument $1 to process..." ;;
  esac
  shift
done


# Main logic

echo "${_0}: Checking for lockss user..."
ensure_lockss_user
echo "${_0}: Checking for Docker..."
ensure_docker
echo "${_0}: Checking for Docker local-persist plugin..."
ensure_persistent_plugin
echo "${_0}: Checking docker swarm is running..."
ensure_docker_swarm
echo "${_0}: Essential compoments have been sucessfully installed."
graceful_exit

