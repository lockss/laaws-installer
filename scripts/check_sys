#!/bin/bash
# ---------------------------------------------------------------------------
# check_sys - Check the host system for all necessary components for running LOCKSS stack.
#
# Copyright (c) 2000-2019, Board of Trustees of Leland Stanford Jr. University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# Usage: check_sys [-h|--help]

# Revision history:
# ---------------------------------------------------------------------------

PROGNAME=${0##*/}
VERSION="1.0"
##
## Relative paths
##
_0=$(basename "${0}")
_D0=$(dirname "${0}")
##
## Load _util
##

. "${_D0}/_util"

OS_TYPE=$(uname -s)
LOCKSS_USER=lockss
LOCAL_HOSTNAME=$(uname -n)

clean_up() { # Perform pre-exit housekeeping
  return
}

error_exit() {
  echo -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
  clean_up
  exit 1
}

graceful_exit() {
  clean_up
  exit
}

signal_exit() { # Handle trapped signals
  case $1 in
  INT)
    error_exit "Program interrupted by user"
    ;;
  TERM)
    echo -e "\n$PROGNAME: Program terminated" >&2
    graceful_exit
    ;;
  *)
    error_exit "$PROGNAME: Terminating on unknown signal"
    ;;
  esac
}

usage() {
  echo -e "Usage: $PROGNAME [-h|--help]"
}

help_message() {
  cat <<-_EOF_
  $PROGNAME ver. $VERSION
  Check the host system for all necessary components for running LOCKSS stack.

  $(usage)

  Options:
  -h, --help  Display this help message and exit.

  NOTE: You must be the superuser to run this script.

_EOF_
  return
}

get_next_daemon_uid() {
  all_uids=$(dscl . -list /Users UniqueID | grep -o '[0-9]\+' | sort -nr)
  for uid in $all_uids; do
    if ((uid < 500)); then
      echo "$(((uid + 1)))"
      exit 0
    fi
  done
  exit 1
}

ensure_lockss_user() {
  echo "Checking lockss user and group..."
  case ${OS_TYPE} in
  Linux)
    if [ ! $(grep -q ^lockss: /etc/passwd) ]; then
      echo "${_0}: The is no 'lockss' user account."
      ask_for_input "OK to create account for 'lockss' user?" Y
      if is_yes "${ANS}"; then
        if useradd -s /bin/false lockss; then
          echo "Created user 'lockss'"
        else
          err_exit "Can't create user lockss"
        fi
      fi
    fi
    ;;
  Darwin)
    if [ $(dscl . -list /Users | grep "lockss" | wc -l) = 0 ]; then
      new_uid=$(get_next_daemon_uid)
      username="lockss"
      realname="Lockss Daemon"

      echo "Creating group ${username} with gid: ${new_uid}"
      dscl . -create "/Groups/${username}"
      dscl . -create "/Groups/${username}" PrimaryGroupID "${new_uid}"
      dscl . -create "/Groups/${username}" RecordName "${username}" "${username}"
      dscl . -create "/Groups/${username}" RealName "${realname}"
      dscl . -create "/Groups/${username}" Password \*

      echo "Creating user ${username} with uid: ${new_uid}"
      dscl . -create "/Users/$username"
      dscl . -create "/Users/$username" NFSHomeDirectory /var/empty
      dscl . -create "/Users/$username" Password \*
      dscl . -create "/Users/$username" PrimaryGroupID "${new_uid}"
      dscl . -create "/Users/$username" RealName "$realname"
      dscl . -create "/Users/$username" RecordName "${username}" "${username}"
      dscl . -create "/Users/$username" UniqueID "${new_uid}"
      dscl . -create "/Users/$username" UserShell /usr/bin/false
      dscl . -delete "/Users/$username" PasswordPolicyOptions
      dscl . -delete "/Users/$username" AuthenticationAuthority
    fi
    ;;
  *)
    error_exit "Unsupported system, create the user lockss in group lockss manually."
    ;;
  esac
}

ensure_docker() {
  if ! command -v "docker" &>/dev/null; then
    echo "${_0}: Docker does not appear to be on the path."
    ask_for_input "OK to install Docker?" Y
    if is_yes "${ANS}"; then
      case ${OS_TYPE} in
      Linux)
        curl -fsSL https://get.docker.com -o get-docker.sh
        $(sh get-docker.sh)
        sudo usermod -G docker -a lockss
        ;;
      Darwin)
          err "Docker Mac must be downloaded and installed manually."
          error_exit "Instructions: https://docs.docker.com/docker-for-mac/install/."
        ;;
      *)
        error_exit "Unsupported system, install docker manually."
        ;;
      esac
    fi
  fi
}

ensure_persistent_plugin() {
  if ! docker volume create -d local-persist -o mountpoint=.config/lptest --name=lptest &>/dev/null; then
    echo "${_0}: The local-persist volume plugin is not installed."
    ask_for_input "OK to install local persist plugin?" Y
    if is_yes "${ANS}"; then
      case $OS_TYPE in
      Linux)
        curl -fsSL https://raw.githubusercontent.com/CWSpear/local-persist/master/scripts/install.sh | bash
        ;;
      Darwin)
        local PLUGIN_DATA_PATH
        local DATA_VOLUME_PATH

        ask_for_input "Path to store plugin data" "${PLUGIN_DATA_PATH}"
        PLUGIN_DATA_PATH=${ANS}
        init_one_dir PLUGIN_DATA_PATH
        ask_for_input "Path to store persistant data" "${DATA_VOLUME_PATH}"
        DATA_VOLUME_PATH=${ANS}
        init_one_dir DATA_VOLUME_PATH
        docker run -d \
          -v /run/docker/plugins/:/run/docker/plugins/ \
          -v $PLUGIN_DATA_PATH:/var/lib/docker/plugin-data/ \
          -v $DATA_VOLUME_PATH:$DATA_VOLUME_PATH \
          cwspear/docker-local-persist-volume-plugin
          if ! docker volume create -d local-persist -o mountpoint=.config/lptest --name=lptest &>/dev/null; then
            echo "Attempt to install local persistant plugin failed. See documentation."
          fi
        ;;
      esac
    else
      error_exit "Unable to run without local-persisist plugin."
    fi
  fi
}

ensure_docker_swarm() {
  if ! docker stack ls &>/dev/null; then
    echo "${_0}: Docker Swarm is not inited"
    ask_for_input "OK to init swarm on this machine?" Y
    if is_yes "${ANS}"; then
      if ! docker swarm init --advertise-addr $LOCAL_IPADDR; then
        error_exit "attempt install swarm failed."
      fi
    else
      error_exit "Docker swarm must be running to run lockss."
    fi
  fi
}

# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT" INT

# Parse command-line
while [[ -n $1 ]]; do
  case $1 in
  -h | --help)
    help_message
    graceful_exit
    ;;
  -* | --*)
    usage
    error_exit "Unknown option $1"
    ;;
  *)
    echo "Argument $1 to process..."
    ;;
  esac
  shift
done

# Main logic
if ! am_i_root ; then
  error_exit "this script must be run as root."
fi

case ${OS_TYPE} in
Linux)
    LOCAL_IPADDR=$(ifconfig eth0 | grep 'inet addr:' | grep -v 127.0.0.1 | tail -1 | sed 's/.*inet addr:\(.*\)  Mask.*/\1/')
    ;;
Darwin)
    LOCAL_IPADDR=$(ifconfig -a | grep 'inet ' | grep -v 127.0.0.1 | tail -1 | sed 's/.*inet \(.*\) netmask.*/\1/')
    ;;
*)
    echo "${OS_TYPE} not supported"
    exit 1
    ;;
esac


# todo: add 'curl' check and install
echo "${_0}: Checking for Docker..."
ensure_docker
echo "${_0}: Checking for Docker local-persist plugin..."
ensure_persistent_plugin
echo "${_0}: Checking docker swarm is running..."
ensure_docker_swarm
echo "${_0}: Checking for lockss user..."
ensure_lockss_user
echo "${_0}: Essential compoments have been sucessfully installed."
graceful_exit
