#!/usr/bin/env bash
# ---------------------------------------------------------------------------
# assemble-lockss - Assemble lockss stack by installing generated configs files, volumes and networks..

# Copyright (c) 2000-2019, Board of Trustees of Leland Stanford Jr. University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Usage: assemble [-h|--help] [-u|--update]
#
# Revision history:
# 2019-04-18 version 1
# ---------------------------------------------------------------------------
PROGNAME=${0##*/}
VERSION="1.0"

##
## Relative paths
##

_0=$(basename "${0}")
_D0=$(dirname "${0}")

##
## Load _util
##

. "${_D0}/_util"

##
## Definitions
##

# Directories
COMPOSE_DIR="$(cd "${_D0}/.." >/dev/null 2>&1 && pwd)"
echo "Setting Install Dir: ${COMPOSE_DIR}"
CONFIG_DIR="${COMPOSE_DIR}/config"
SCRIPTS_DIR="${COMPOSE_DIR}/scripts"
DOCKER_CONFIGS_DIR="${CONFIG_DIR}/configs"
TEMPLATES_DIR="${CONFIG_DIR}/templates"
UPDATES_DIR="${SCRIPTS_DIR}/upgrades"
USEROPTS_DIR="${CONFIG_DIR}/useropts"
# Files
SYSTEM_CONF_FILE="${CONFIG_DIR}/system.cfg"
EMPTY_LOCKSS_TXT="${TEMPLATES_DIR}/blank_lockss.txt"
EMPTY_LOCKSS_OPT="${TEMPLATES_DIR}/blank_lockss.opt"
INGRESS_PATCH_FILE="nginx-ingress-controller-patch.yaml"

#Data
declare -a arr global_confs=("lockss-cluster" "lockss-bootstrap" "repo-properties")
declare -a arr svcs
declare -a arr svcs_confs
declare -a secrets=("lockss-ui-pass" "lockss-auth" "lockss-postgres-pass")

alias kubectl='microk8s kubectl'

STACK_PREFIX="lockss-stack"
STACK_DIRS=(${DOCKER_CONFIGS_DIR}/*/)
NUM_STACKS=${#STACK_DIRS[@]}
STACK_NUM=0
UPDATE_IMAGES=0

clean_up() { # Perform pre-exit housekeeping
  return
}

error_exit() {
  echo -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
  clean_up
  exit 1
}

graceful_exit() {
  clean_up
  exit
}

signal_exit() { # Handle trapped signals
  case $1 in
  INT)
    error_exit "Program interrupted by user"
    ;;
  TERM)
    echo -e "\n$PROGNAME: Program terminated" >&2
    graceful_exit
    ;;
  *)
    error_exit "$PROGNAME: Terminating on unknown signal"
    ;;
  esac
}

usage() {
  echo -e "Usage: $PROGNAME [-h|--help] [-u|--update]"
}

help_message() {
  cat <<-_EOF_
  $PROGNAME ver. $VERSION
  This script will take the generated stack and add necessary elements to docker.

  $(usage)

  Options:
  -h, --help  Display this help message and exit.
  -u, --update  force update of LOCKSS docker images

_EOF_
  return
}

# $1=file $2=blankfile
Config_Or_Blank() {
  if [ -f "${1}/${2}" ]; then
    echo "${1}/${2}"
  else
    echo "${1}/${3}"
  fi
}

Check_Physical_Volumes() {
  if [ -z "${LOCKSS_DATA_DIR}" ] || [ -z "${LOCKSS_LOGS_DIR}" ]; then
    echo "LOCKSS_DATA_DIR and LOCKSS_LOGS_DIR are not set; exiting"
    exit 1
  fi
}

start_microk8s() {
  microk8s enable dashboard dns
  if ! kubectl get namespace lockss &>/dev/null; then
    kubectl create namespace lockss
  fi
  kubectl config set-context --current --namespace=${LOCKSS_NAMESPACE}
}

#initialize the service arrays based on system.cfg info.
init_service_arrays() {
  if ${USE_LOCKSS_CFG}; then
    svcs+=("cfg")
    svcs_confs+=("cfg")
  fi
  if ${USE_LOCKSS_MDQ}; then
    svcs+=("mdq")
    svcs_confs+=("mdq")
  fi
  if ${USE_LOCKSS_MDX}; then
    svcs+=("mdx")
    svcs_confs+=("mdx")
  fi
  if ${USE_LOCKSS_POL}; then
    svcs+=("pol")
    svcs_confs+=("pol")
  fi
  if ${USE_LOCKSS_REPO}; then
    svcs+=("repo")
    svcs_confs+=("repo")
  fi
  if ${USE_LOCKSS_POSTGRES}; then
    svcs+=("postgres")
  fi
  if ${USE_LOCKSS_SOLR}; then
    svcs+=("solr")
  fi
  if ${USE_LOCKSS_HDFS}; then
    svcs+=("hdfs")
  fi
  if ${USE_LOCKSS_PYWB}; then
    svcs+=("pywb")
  fi
  if ${USE_LOCKSS_OPENWB}; then
    svcs+=("openwb")
  fi
}

# Create configs for each stack
add_stack_configs() {
  local stack=$1
  local stack_path="${DOCKER_CONFIGS_DIR}/$stack"
  local key
  # Create the global configs
  msg "Adding global config files"
  for gconf in "${global_confs[@]}"; do
    key=${gconf}
    kubectl delete configmap ${key} --namespace=${LOCKSS_NAMESPACE} &>/dev/null
    if ! kubectl create configmap ${key} --namespace=${LOCKSS_NAMESPACE} --from-file=${key}=$(Config_Or_Blank $stack_path "${gconf}" "blank_lockss"); then
      error_exit "${_0}: error creating config $stack-${gconf}"
    fi
    kubectl delete configmap ${key}-opt --namespace=${LOCKSS_NAMESPACE} &>/dev/null
    if ! kubectl create configmap ${key}-opt --namespace=${LOCKSS_NAMESPACE} --from-file=${key}-opt=$(Config_Or_Blank $stack_path "${gconf}_opt" "blank_lockss_opt"); then
      error_exit "${_0}: error creating config $stack-${gconf}_opt"
    fi
  done
  # Create the configs for each lockss service
  msg "Adding service config files"
  for sconf in "${svcs_confs[@]}"; do
    key=${sconf}-service
    echo "adding service config ${key}..."
    kubectl delete configmap ${key} --namespace=${LOCKSS_NAMESPACE} &>/dev/null
    if ! kubectl create configmap ${key} --namespace=${LOCKSS_NAMESPACE} --from-file=${key}=$(Config_Or_Blank $stack_path "${key}" "blank_lockss"); then
      error_exit "${_0}: error creating config ${key}"
    fi
    kubectl delete configmap ${key}-opt --namespace=${LOCKSS_NAMESPACE} &>/dev/null
    if ! kubectl create configmap ${key}-opt --namespace=${LOCKSS_NAMESPACE} --from-file=${key}-opt=$(Config_Or_Blank $stack_path "${key}-opt" "blank_lockss_opt"); then
      error_exit "${_0}: error creating config ${key}-opt"
    fi
  done
}

# Add shared stack elements
add_stack_shared() {
  local stack=$1
  mk_dir="${DOCKER_CONFIGS_DIR}/$stack/mk"
  msg "clearing old deployments and configmaps..."
  kubectl delete deployments -l lockss-stack-id=${stack}  --namespace=${LOCKSS_NAMESPACE} &>/dev/null
  kubectl delete configmaps,secrets,pvc -l lockss-stack-id=${stack} --namespace=${LOCKSS_NAMESPACE} &>/dev/null
  msg "adding global kustomization file"
  msg "adding storage class: local-storage from ${mk_dir}/local-storage.yaml"
  kubectl apply -f "${mk_dir}/local-storage.yaml" --namespace=${LOCKSS_NAMESPACE}
  msg "adding network policy from ${mk_dir}/lockss-networkpolicy.yaml"
  kubectl apply -f "${mk_dir}/lockss-networkpolicy.yaml" --namespace=${LOCKSS_NAMESPACE}
  msg "adding secrets..."
  for sec in "${secrets[@]}"; do
    kubectl delete secret ${sec} --namespace=${LOCKSS_NAMESPACE} &>/dev/null
    msg "adding ${sec}"
    kubectl create secret generic ${sec} --namespace=${LOCKSS_NAMESPACE} --from-file "${USEROPTS_DIR}/${sec}"
  done
}

check_stack_solr() {
  local stack=$1

  SOLR_HOME_PATH="${LOCKSS_DATA_DIR}/${stack}-solr-data"

  CORE_PATH="${SOLR_HOME_PATH}/mycores"
  SOLR_FILE="${SOLR_HOME_PATH}/solr.xml"
  OLD_REPO="${SOLR_HOME_PATH}/${SOLR_CORE_REPO}"
  SOLR_CONFIG_PATH="${SOLR_HOME_PATH}/configsets/lockss"
  SOLR_OWNER="${LOCKSS_UID}:${LOCKSS_GID}"

  msg "Checking solr installation at ${SOLR_HOME_PATH}..."

  if [ -d "${OLD_REPO}" ]; then
    error_exit "You are attempting to run with an older version without updating, please run upgrade script"
  fi
  msg "Checking solr installation for essential files..."

  if [ ! -e "${SOLR_FILE}" ] || [ ! -e "${CORE_PATH}" ] || [ ! -e "${SOLR_CONFIG_PATH}/v3" ]; then
    msg "Preparing solr home '${SOLR_HOME_PATH}' for new install..."
    sudo tar -xzf "${UPDATES_DIR}/solr-home.tar.gz" -C "${SOLR_HOME_PATH}" >/dev/null ||
      error_exit "Unable to install LOCKSS solr files, exiting..."
    sudo chown -R "${SOLR_OWNER}" "${SOLR_HOME_PATH}" ||
      error_exit "Attempt to change ownership to ${SOLR_OWNER} on ${SOLR_HOME_PATH} failed."
  fi
}

# Create a mount points for each stack
add_stack_volumes() {
  local stack=$1
  for svc in "${svcs[@]}"; do
    echo "creating data and log volumes for $stack-${svc}..."
    mtpoint=${LOCKSS_DATA_DIR}/$stack-${svc}-data
    mkdir -p ${mtpoint} || error_exit "unable to create data dir: ${mtpoint}"
    mtpoint=${LOCKSS_LOGS_DIR}/$stack-${svc}-logs
    mkdir -p ${mtpoint} || error_exit "unable to create data dir: ${mtpoint}"
  done
  add_additional_stack_volumes $stack
  kubectl apply -f mk/lockss-persistent-volumes.yaml -n lockss
}

add_additional_stack_volumes() {
  local stack=$1
  IFS=';' read -r -a datadirs <<<"${LOCKSS_REPO_HOST_DIRS}"
  len=${#datadirs[@]}
  start=1
  msg "creating additional data volumes for $stack-repository-service..."
  for ((cnt = $start; cnt < $len; cnt++)); do
    mtpoint=${datadirs[$cnt]}/$stack-repo-data
    mkdir -p ${mtpoint} || error_exit "unable to create data dir: ${mtpoint}"
    mtname=$stack-repo-data${cnt}
  done
}

assemble_stack() {
  local stack=${STACK_PREFIX}$1
  echo "Processing stack $stack"
  # Source config.info and env.sh for this stack
  set -a
  . "${DOCKER_CONFIGS_DIR}/$stack/env.sh"
  set +a
  pushd . &>/dev/null
  cd "${DOCKER_CONFIGS_DIR}/$stack" || error_exit "Unable to cd to ${DOCKER_CONFIGS_DIR}/$stack."
  add_stack_shared ${stack}
  add_stack_volumes ${stack}
  add_stack_configs ${stack}
  check_stack_solr ${stack}
  popd &>/dev/null
}

###
# Start
###
# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT" INT

# Parse command-line
while [[ -n $1 ]]; do
  case $1 in
  -h | --help)
    help_message
    graceful_exit
    ;;
  -u | --update)
    UPDATE_IMAGES=1
    msg "Forcing update of LOCKSS docker images"
    ;;
  [1-9])
    STACK_NUM=$1
    ;;
  -* | --*)
    usage
    error_exit "Unknown option $1"
    ;;
  *)
    echo "Argument $1 to process..."
    ;;
  esac
  shift
done

# Main logic

# Source system config file
set -a
. "${SYSTEM_CONF_FILE}"
set +a

if $(am_i_root); then
  error_exit "This script should not be run as root. Run as the lockss user."
fi

# Sanity checks
#Check_Runnable
#Check_Physical_Volumes
echo "starting local microk8s..."
start_microk8s

init_service_arrays

if [ ${NUM_STACKS} -eq 0 ]; then
  error_exit "No configuration files have been generated, run generate-lockss first."
elif [ ${NUM_STACKS} -eq 1 ]; then
  assemble_stack ""
elif [ ${STACK_NUM} -eq 0 ]; then
  for ((num = 1; num <= $NUM_STACKS; num++)); do
    assemble_stack $num
  done
elif [ -e "${DOCKER_CONFIGS_DIR}/${STACK_PREFIX}${STACK_NUM}" ]; then
  assemble_stack ${STACK_NUM}
else
  error_exit "Unable to find generated stack ${STACK_NUM}"
fi

msg ""
msg "Successfully installed."
msg ""
msg "Run deploy-lockss to deploy the assembled stacks."

graceful_exit
