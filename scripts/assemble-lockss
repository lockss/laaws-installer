#!/usr/bin/env bash
# ---------------------------------------------------------------------------
# assemble-lockss - Generate and assemble files needed to run a LOCKSS stack
#
# Copyright (c) 2000-2021, Board of Trustees of Leland Stanford Jr. University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Usage: assemble-lockss [-h|--help] [-u|--update] <num stacks>
#
# Revision history:
# ---------------------------------------------------------------------------
PROGNAME=${0##*/}
VERSION="1.0"

##
## Relative paths
##

_0=$(basename "${0}")
_D0=$(dirname "${0}")

##
## Load _util
##

. "${_D0}/_util"
. "${_D0}/lib/mo"

##
## Definitions
##
# Directories
USEROPTS_DIR="${CONFIG_DIR}/useropts"
SERVICES_DIR="${TEMPLATES_DIR}/svcs"
MK_DIR="${TEMPLATES_DIR}/mk"

# Files
ENV_TMPL="${CONFIG_DIR}/env.mustache"
COMPOSE_TMPL="${CONFIG_DIR}/docker-compose.mustache"
SYSTEM_CONF_FILE="${CONFIG_DIR}/system.cfg"
STORAGE_CLASS_FILE="local-storage.yaml"

EMPTY_LOCKSS_TXT="${TEMPLATES_DIR}/blank_lockss.txt"
EMPTY_LOCKSS_OPT="${TEMPLATES_DIR}/blank_lockss.opt"


# Variables
declare -i STACK_COUNT=1
declare -a secrets=("lockss-ui-pass" "lockss-auth" "lockss-postgres-pass")
declare -a arr global_confs=("lockss-cluster" "lockss-bootstrap" "repo-properties" "lockss-solr-log4j-properties")
declare -a arr svcs
declare -a arr svcs_confs
declare -a arr lockss_owned

STACK_PREFIX="lockss-stack"
STACK_DIRS=(${DOCKER_CONFIGS_DIR}/*/)
NUM_STACKS=${#STACK_DIRS[@]}
STACK_NUM=0
UPDATE_IMAGES=0
PORT_BASE=245
PULL_POLICY="IfNotPresent"

KUBECTL='microk8s kubectl -n lockss'

clean_up() { # Perform pre-exit housekeeping
  log_script_exit  "${PROGNAME}"
}

error_exit() {
  logger_fatal "${1:-"Unknown Error"}" >&2
  clean_up
  exit 1
}

graceful_exit() {
  clean_up
  exit
}

signal_exit() { # Handle trapped signals
  case $1 in
  INT)
    error_exit "Program interrupted by user"
    ;;
  TERM)
    logger_error "Program terminated"
    graceful_exit
    ;;
  *)
    error_exit "Terminating on unknown signal"
    ;;
  esac
}

usage() {
  echo -e "Usage: $PROGNAME [-h|--help]  [-u|--update] [<num stacks>]"
}

help_message() {
  cat <<-_EOF_
  $PROGNAME ver. $VERSION
  Generate files needed to run a LOCKSS stack and assemble them for deployment.

  $(usage)

  Options:
  -h, --help  Display this help message and exit.
  -u, --update  force update of LOCKSS docker images
  <num stacks> Optional number of stacks to run on this host.

_EOF_
  return
}

# $1=file $2=blankfile
Config_Or_Blank() {
  if [ -f "${1}/${2}" ]; then
    echo "${1}/${2}"
  else
    echo "${1}/${3}"
  fi
}

Check_Physical_Volumes() {
  if [ -z "${LOCKSS_DATA_DIR}" ]; then
    error_exit "LOCKSS_DATA_DIR is not set; exiting"
  fi
  if  [ -z "${LOCKSS_LOGS_DIR}" ]; then
    error_exit "LOCKSS_LOGS_DIR is not set; exiting"
  fi
  if [ -z "${LOCKSS_TMPDIR}" ]; then
    error_exit "LOCKSS_TMPDIR are not set; exiting"
  fi
}


#initialize the service arrays based on system.cfg info.
init_service_arrays() {
  if ${USE_LOCKSS_CFG}; then
    svcs+=("cfg")
    svcs_confs+=("cfg")
    lockss_owned+=("cfg")
  fi
  if ${USE_LOCKSS_MDQ}; then
    svcs+=("mdq")
    svcs_confs+=("mdq")
    lockss_owned+=("mdq")
  fi
  if ${USE_LOCKSS_MDX}; then
    svcs+=("mdx")
    svcs_confs+=("mdx")
    lockss_owned+=("mdx")
  fi
  if ${USE_LOCKSS_POL}; then
    svcs+=("pol")
    svcs_confs+=("pol")
    lockss_owned+=("pol")
  fi
  if ${USE_LOCKSS_REPO}; then
    svcs+=("repo")
    svcs_confs+=("repo")
    lockss_owned+=("repo")
  fi
  if ${USE_LOCKSS_POSTGRES}; then
    svcs+=("postgres")
  fi
  if ${USE_LOCKSS_SOLR}; then
    svcs+=("solr")
    lockss_owned+=("solr")
  fi
  if ${USE_LOCKSS_HDFS}; then
    svcs+=("hdfs")
  fi
  if ${USE_LOCKSS_PYWB}; then
    svcs+=("pywb")
  fi
  if ${USE_LOCKSS_OPENWB}; then
    svcs+=("openwb")
  fi
}


ensure_writable_dir() {
  local DIR="$1"
  USER=$(stat -c '%u' ${DIR})
  GROUP=$(stat -c '%g' ${DIR})
  if [ $USER -eq ${LOCKSS_UID} ]; then
     return 0
  else
    logger_warn "${DIR} is not writable by ${LOCKSS_USER}; attempting to chown it."
    sudo chown -R ${LOCKSS_UID}:${LOCKSS_GID} "${DIR}"
  fi
}

ensure_lockss_owner() {
  for svc in "${lockss_owned[@]}"; do
    data_dir=${LOCKSS_DATA_DIR}/$stack-${svc}-data
    sudo find "${data_dir}" \! -user ${LOCKSS_UID} | xargs -I{} -P3 -- sudo chown ${LOCKSS_UID}:${LOCKSS_GID} {}
    logs_dir=${LOCKSS_LOGS_DIR}/$stack-${svc}-logs
    sudo find "${logs_dir}" \! -user ${LOCKSS_UID} | xargs -I{} -P3 -- sudo chown ${LOCKSS_UID}:${LOCKSS_GID} {}
    tmp_dir=${LOCKSS_TMPDIR}/$stack-${svc}-tmp
    sudo find "${tmp_dir}" \! -user ${LOCKSS_UID} | xargs -I{} -P3 -- sudo chown ${LOCKSS_UID}:${LOCKSS_GID} {}
  done
}

# Create configs for each stack
add_stack_configs() {
  local stack=$1
  local stack_path="${DOCKER_CONFIGS_DIR}/$stack"
  local key
  # Create the global configs
  logger_info "Adding global config files"
  for gconf in "${global_confs[@]}"; do
    key=${gconf}
    if ! $KUBECTL create configmap ${key} --namespace=${LOCKSS_NAMESPACE} --from-file=${key}=$(Config_Or_Blank $stack_path "${gconf}" "blank_lockss"); then
      error_exit "${_0}: error creating config $stack-${gconf}"
    fi
    if ! $KUBECTL create configmap ${key}-opt --namespace=${LOCKSS_NAMESPACE} --from-file=${key}-opt=$(Config_Or_Blank $stack_path "${gconf}_opt" "blank_lockss_opt"); then
      error_exit "${_0}: error creating config $stack-${gconf}_opt"
    fi
  done
  # Create the configs for each lockss service
  logger_info "Adding service config files"
  for sconf in "${svcs_confs[@]}"; do
    key=${sconf}-service
    logger_debug "adding service config ${key}..."
   if ! $KUBECTL create configmap ${key} --namespace=${LOCKSS_NAMESPACE} --from-file=${key}=$(Config_Or_Blank $stack_path "${key}" "blank_lockss"); then
      error_exit "${_0}: error creating config ${key}"
    fi
    if ! $KUBECTL create configmap ${key}-opt --namespace=${LOCKSS_NAMESPACE} --from-file=${key}-opt=$(Config_Or_Blank $stack_path "${key}-opt" "blank_lockss_opt"); then
      error_exit "${_0}: error creating config ${key}-opt"
    fi
  done
}


# Add shared stack elements
add_stack_shared() {
  local stack=$1
  local mk_dir="${DOCKER_CONFIGS_DIR}/$stack/mk"
  logger_debug "Clearing old deployments..."
  $KUBECTL delete deployments -l lockss-stack-id=${stack}
  logger_debug "Clearing old  configuration maps..."
  $KUBECTL delete configmaps --all
  logger_debug "Applying storage class: local-storage from ${mk_dir}/local-storage.yaml"
  microk8s kubectl apply -f "${mk_dir}/local-storage.yaml"
}

check_stack_solr() {
  local stack=$1

  SOLR_HOME_PATH="${LOCKSS_DATA_DIR}/${stack}-solr-data"

  CORE_PATH="${SOLR_HOME_PATH}/mycores"
  SOLR_FILE="${SOLR_HOME_PATH}/solr.xml"
  OLD_REPO="${SOLR_HOME_PATH}/${SOLR_CORE_REPO}"
  SOLR_CONFIG_PATH="${SOLR_HOME_PATH}/configsets/lockss"

  logger_info "Checking solr installation at ${SOLR_HOME_PATH}..."

  if [ -d "${OLD_REPO}" ]; then
    error_exit "You are attempting to run with an older version without updating, please run upgrade script"
  fi
  logger_info "Checking solr installation for essential files..."

  if [ ! -e "${SOLR_FILE}" -o ! -e "${CORE_PATH}" ]; then
    logger_info "Preparing solr home '${SOLR_HOME_PATH}' for new install..."
    ensure_writable_dir ${SOLR_HOME_PATH} ||
      error_exit "Unable to write to ${SOLR_HOME_PATH}"
    tar -xzf "${UPDATES_DIR}/solr-home.tar.gz"-C "${SOLR_HOME_PATH}">/dev/null ||
      error_exit "Unable to install LOCKSS solr files, exiting..."
  fi
}

# Create a mount points for each stack
add_stack_volumes() {
  local stack=$1
  mk_dir="${DOCKER_CONFIGS_DIR}/$stack/mk"

  ensure_writable_dir $LOCKSS_DATA_DIR
  ensure_writable_dir $LOCKSS_LOGS_DIR
  ensure_writable_dir $LOCKSS_TMPDIR
  logger_info "Creating data and log volumes for $stack"
 for svc in "${svcs[@]}"; do
    logger_debug "Creating data and log volumes for $stack-${svc}..."
    mtpoint=${LOCKSS_DATA_DIR}/$stack-${svc}-data
    mkdir -p ${mtpoint} || error_exit "unable to create data dir: ${mtpoint}"
    mtpoint=${LOCKSS_LOGS_DIR}/$stack-${svc}-logs
    mkdir -p ${mtpoint} || error_exit "unable to create logs dir: ${mtpoint}"
    mtpoint=${LOCKSS_TMPDIR}/$stack-${svc}-tmp
    mkdir --mode=1777 -p ${mtpoint} || error_exit "unable to create tmp dir: ${mtpoint}"
  done
  add_additional_stack_volumes $stack
  $KUBECTL apply -f ${mk_dir}/lockss-persistent-volumes.yaml
  ensure_lockss_owner
}

add_additional_stack_volumes() {
  local stack=$1
  IFS=';' read -r -a datadirs <<<"${LOCKSS_REPO_HOST_DIRS}"
  len=${#datadirs[@]}
  start=1
  logger_debug "Creating additional data volumes for $stack-repository-service..."
  for ((cnt = $start; cnt < $len; cnt++)); do
    mtpoint=${datadirs[$cnt]}/$stack-repo-data
    mkdir -p ${mtpoint} || error_exit "Unable to create data dir: ${mtpoint}"
    mtname=$stack-repo-data${cnt}
  done
}

assemble_stack() {
  local stack=${STACK_PREFIX}$1
  logger_info "Processing stack $stack"
  # Source config.info and env.sh for this stack
  set -a
  . "${DOCKER_CONFIGS_DIR}/$stack/env.sh"
  set +a
  pushd . &>/dev/null
  cd "${DOCKER_CONFIGS_DIR}/$stack"|| error_exit "Unable to cd to ${DOCKER_CONFIGS_DIR}/$stack."
  add_stack_shared ${stack}
  add_stack_volumes ${stack}
  add_stack_configs ${stack}
  check_stack_solr ${stack}
  popd &>/dev/null
}

generate_lockss() {
	logger_info "Removing old generated configuration files..."
	rm -rf "${DOCKER_CONFIGS_DIR}"
	logger_info "Generating config files for $STACK_COUNT stacks..."
	for ((num = 1; num <= $STACK_COUNT; num++)); do
		export STACK_PORT_BASE=$((${PORT_BASE} + $num))
		if [ ${STACK_COUNT} = 1 ]; then
			STACK_NAME="${STACK_PREFIX}"
		else
			STACK_NAME="${STACK_PREFIX}$num"
		fi
    logger_info "Generating files for stack $STACK_NAME"
    export STACK_NAME
    export STACK_LCAP_PORT=$((${LOCKSS_V3_PORT} + $num - 1))
    export STACK_CONFIG_DIR="${DOCKER_CONFIGS_DIR}/${STACK_NAME}"
    stack_env_file="${STACK_CONFIG_DIR}/env.sh"
    stack_compose_file="${STACK_CONFIG_DIR}/docker-compose.yml"
    logger_debug "Stack ${num} named ${STACK_NAME} is using port base of ${STACK_PORT_BASE}."
    mkdir -p "${STACK_CONFIG_DIR}"

    logger_debug "Generating the stack env.sh file..."
    mo "${ENV_TMPL}" >"${stack_env_file}"
    set -a
    . "${stack_env_file}"
    set +a

    logger_debug "Getting node hostname..."
    export NODE_HOSTNAME=$(microk8s kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="Hostname")].address}')
    logger_degug "Getting postgres password..."
    export POSTGRES_PASSWD=$(microk8s kubectl get secret -n lockss lockss-postgres-pass -o jsonpath='{.data.lockss-postgres-pass}'| base64 --decode -)

    IFS=';' read -r -a datadirs <<<"${LOCKSS_REPO_HOST_DIRS}"
    len=${#datadirs[@]}
    REPO_NUMS[0]=""
    export REPO_DATA_MAP_=${datadirs[0]}
    for ((count = 1; count < $len; count++)); do
      REPO_NUMS[${count}]="$count"
      declare REPO_DATA_MAP_${count}=${datadirs[$count]}
      varname=REPO_DATA_MAP_${count}
      export $varname
    done
    export REPO_NUMS
    logger_info "Generating the service deployments..."
    mkdir "${STACK_CONFIG_DIR}/svcs"
    for f in ${SERVICES_DIR}/*.mustache; do
      src="${f}"
      dst="${STACK_CONFIG_DIR}/svcs/$(basename "${f}" .mustache).yaml"
      logger_debug "Rendering ${src} to ${dst}..."
      mo "${src}" >"${dst}"
    done
    logger_info "Generating the microk8s files..."
    mk_dst="${STACK_CONFIG_DIR}/mk"
    mkdir "${mk_dst}"
    cp "${MK_DIR}/${STORAGE_CLASS_FILE}" "${mk_dst}/${STORAGE_CLASS_FILE}"
    for f in ${MK_DIR}/*.mustache; do
      src="${f}"
      dst="${mk_dst}/$(basename "${f}" .mustache).yaml"
      logger_debug "Rendering ${src} to ${dst}..."
      mo "${src}" >"${dst}"
      envsubst < ${dst} > ${dst}.out
      mv ${dst}.out ${dst}
    done
    logger_info "Generating lockss configuration files..."
    for f in ${TEMPLATES_DIR}/*.mustache; do
      src="${f}"
      dst="${STACK_CONFIG_DIR}/$(basename "${f}" .mustache)"
      logger_debug "Rendering ${src} to ${dst}..."
      mo "${src}" >"${dst}"
    done
    logger_info "Generating the user configuration files..."
    for f in ${USEROPTS_DIR}/templates/*_opt.mustache; do
      if [[ -f "${f}" ]]; then
        src="${f}"
        dst="${STACK_CONFIG_DIR}/$(basename "${f}" _opt.mustache)-opt"
        logger_debug "Rendering ${src} to ${dst}..."
        mo "${src}" >"${dst}"
      fi
    done
  done
	logger_info "Successfully regenerated stack components."
}

assemble_lockss() {

	NUM_STACKS=${#STACK_DIRS[@]}

	if [ ${NUM_STACKS} -eq 0 ]; then
		error_exit "No configuration files have been generated, run generate-lockss first."
	elif [ ${NUM_STACKS} -eq 1 ]; then
		assemble_stack ""
	elif [ ${STACK_NUM} -eq 0 ]; then
		for ((num = 1; num <= $NUM_STACKS; num++)); do
			assemble_stack $num
		done
	elif [ -e "${DOCKER_CONFIGS_DIR}/${STACK_PREFIX}${STACK_NUM}" ]; then
		assemble_stack ${STACK_NUM}
	else
		error_exit "Unable to find generated stack ${STACK_NUM}"
	fi
	logger_info "Successfully installed components."

}

##
## MAIN
##

# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT" INT

# Source system config file
set -a
. "${SYSTEM_CONF_FILE}"
set +a

logger_init
log_script_entry "${PROGNAME}"
umask 002

# Parse command-line
while [[ -n $1 ]]; do
  case $1 in
  -h | --help)
    help_message
    graceful_exit
    ;;
  -u | --update)
    PULL_POLICY="Always"
    logger_info "Forcing update of LOCKSS docker images"
    ;;
  [1-9])
    STACK_COUNT=$1
    ;;
  -* | --*)
    usage
    error_exit "Unknown option $1"
    ;;
  *)
    logger_debug "Argument $1 to process..."
    ;;
  esac
  shift
done

# Sanity checks
if $(am_i_root); then
  error_exit "This script should not be run as root. Run as the lockss user."
fi
logger_info "Checking system..."
Check_Runnable
Check_Physical_Volumes

init_service_arrays

generate_lockss || error_exit "Unable to generate needed components."
assemble_lockss || error_exit "Unable to assemble all lockss components."
logger_info "LOCKSS is ready to deploy."
graceful_exit
