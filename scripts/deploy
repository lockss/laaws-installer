#!/bin/sh

# Copyright (c) 2000-2019, Board of Trustees of Leland Stanford Jr. University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission. 
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
##
## Relative paths
##

_0=$(basename "${0}")
_D0=$(dirname "${0}")

##
## Load _util
##

. "${_D0}/_util"

##
## Definitions
##

# Directories
COMPOSE_DIR="${_D0}/../"
CONFIG_DIR="${_D0}/../config"
DOCKER_CONFIGS_DIR="${CONFIG_DIR}/configs/"
TEMPLATES_DIR="${CONFIG_DIR}/templates/"

# Files
DOCKER_COMPOSE_FILE="${COMPOSE_DIR}/docker-compose.yaml"
ENV_FILE="${COMPOSE_DIR}/.env"
EMPTY_LOCKSS_TXT="${TEMPLATES_DIR}/blank_lockss.txt"
EMPTY_LOCKSS_OPT="${TEMPLATES_DIR}/blank_lockss.opt"

#Data
declare -a arr vols=( "cfg" "mdq" "mdx" "pol" "repo" "postgres" "solr" "hdfs" "pywb")
declare -a arr global_confs=("lockss_cluster" "lockss_bootstrap")

declare -a arr service_confs=("cfg" "mdq" "pol" "repo")
##
## MAIN
##

# Source env
set -a
. "${CONFIG_DIR}/env"
set +a

# Sanity checks
Check_Installed 'docker' 'docker-compose'
Check_Docker
Check_Stack

# Create the global configs
for gconf in "${global_confs[@]}"
do
  echo "creating docker config for global conf ${gconf}..."
  docker config create --template-driver golang ${DOCKER_CONFIGS_DIR}/${gconf} ${gconf}
done

# Create the configs for each lockss service
for sconf in "${service_confs[@]}"
do
  echo "creating docker config of conf..."
  sconf_file = ${DOCKER_CONFIGS_DIR}/${sconf}_service
  sconf_opt =  ${DOCKER_CONFIGS_DIR}/${sconf}_service_opt

# create missing lockss.txt file
  if [ ! -f ${sconf_file} ]
  then
    echo "using empty lockss.txt for ${sconf_file}"
    cp ="${EMPTY_LOCKSS_TXT} ${sconf_file}"
  fi
# create missing lockss.opt file
  if [ ! -f ${sconf_opt} ]
  then
    echo "using empty lockss.opt for ${sconf_opt}"
    cp ="${EMPTY_LOCKSS_OPT} ${sconf_opt}"
  fi
# now docker create the configs
  docker config create --template-driver golang sconf_file ${sconf}_service
  docker config create --template-driver golang sconf_opt ${sconf}_service_opt
done

# Create a mount points for each vols
for vol in "${vols[@]}"
do
  echo "creating docker data and log volumes for ${vol}..."
  docker volume create -d local-persist -o mountpoint=${LOCKSS_DATA_DIR}/lockss-${vol}-data --name=lockss-${vol}-data
  docker volume create -d local-persist -o mountpoint=${LOCKSS_LOGS_DIR}/lockss-${vol}-logs --name=lockss-${vol}-logs
done

docker stack deploy --comopose-file ${DOCKER_COMPOSE_FILE} lockss-stack
