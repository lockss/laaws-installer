#!/bin/bash
# ---------------------------------------------------------------------------
# upgrade-alpha1-to-alpha2 - Undeploy all stacks and remove all installed stack info..
#
# Copyright (c) 2000-2019, Board of Trustees of Leland Stanford Jr. University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Usage: upgrade-alpha1-to-alpha2 [-h|--help]
#
# Revision history:
# 2019-04-18 version 1
# ---------------------------------------------------------------------------

PROGNAME=${0##*/}
VERSION="1.0"

##
## Relative paths
##
_0=$(basename "${0}")
_D0=$(dirname "${0}")
##
## Load _util
##
. "${_D0}/_util"
. "${_D0}/_util_solr"

##
## Definitions
##

# Directories
COMPOSE_DIR="$( cd "$( dirname "${_D0}" )" >/dev/null 2>&1 && pwd )"
CONFIG_DIR="${COMPOSE_DIR}/config"
SCRIPTS_DIR="${COMPOSE_DIR}/scripts"
UPDATES_PATH="${SCRIPTS_DIR}/upgrades"
POSTGRES_VOL="lockss-stack-postgres-data"

# Files
SYSTEM_CONF_FILE="${CONFIG_DIR}/system.cfg"
OLD_SYSTEM_CONF_FILE="${CONFIG_DIR}/config.info"
SQL_FILE="${UPDATES_PATH}/alpha1-to-alpha2-db-rename.sql"
SQL_PASS_FILE="/run/secrets/lockss-postgres-pass"

clean_up() { # Perform pre-exit housekeeping
	return
}

error_exit() {
	echo -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
	clean_up
	exit 1
}

graceful_exit() {
	clean_up
	exit
}

signal_exit() { # Handle trapped signals
	case $1 in
		INT)
			error_exit "Program interrupted by user" ;;
		TERM)
			echo -e "\n$PROGNAME: Program terminated" >&2
			graceful_exit ;;
		*)
			error_exit "$PROGNAME: Terminating on unknown signal" ;;
	esac
}

usage() {
	echo -e "Usage: $PROGNAME [-h|--help] [-a|--args ARGS_ADDITIONAL]"
}

help_message() {
  cat <<- _EOF_
  $PROGNAME ver. $VERSION
  "Update an alpha1 version to an alpha2 version."

  $(usage)

  Options:
  -h, --help  Display this help message and exit.

_EOF_
  return
}


rename_dirs() {
  msg "${PROGNAME}: Looking for old data directories..."
    for dir in $(ls -d ${LOCKSS_DATA_DIR}/lockss-stack1*); do
      new_dir="${dir/stack1/stack}"
      if [ ! -d "${new_dir}" ]; then
        mv "$dir" "${new_dir}"
      fi
    done
  msg "${PROGNAME}: Looking for old log directories..."
    for dir in $(ls -d ${LOCKSS_LOG_DIR}/lockss-stack1*); do
      new_dir="${dir/stack1/stack}"
      if [ ! -d "${new_dir}" ]; then
        mv "$dir" "${new_dir}"
      fi
    done
}

update_sql() {
  msg "${PROGNAME}: bringing up temporary postgres instance..."
  docker run --rm --name postgres-temp -v "${LOCKSS_DATA_DIR}/${POSTGRES_VOL}":/data -e POSTGRES_PASSWORD_FILE=${SQL_PASS_FILE} -e POSTGRES_USER=LOCKSS -e PGDATA=/data -d postgres:9.6.12-alpine
  sleep 10
  docker exec -it postgres-temp psql -U LOCKSS -d postgres <"${SQL_FILE}"
  docker container stop postgres-temp
  msg "${PROGNAME}: Finished postgres update..."
}

write_sysconf() {
  cat >${SYSTEM_CONF_FILE} <<EOF
LOCKSS_CONFIG_VERSION="${LOCKSS_CONFIG_VERSION}"
LOCKSS_USER="${LOCKSS_USER}"
LOCKSS_HOSTNAME="${LOCKSS_HOSTNAME}"
LOCKSS_IPADDR="${LOCKSS_IPADDR}"
LOCKSS_EXTERNAL_IPADDR="${LOCKSS_EXTERNAL_IPADDR}"
LOCKSS_V3_PORT="${LOCKSS_V3_PORT}"
LOCKSS_ACCESS_SUBNET="${LOCKSS_ACCESS_SUBNET}"
LOCKSS_MAILHUB="${LOCKSS_MAILHUB}"
LOCKSS_MAILHUB_USER="${LOCKSS_MAILHUB_USER}"
LOCKSS_MAILHUB_PASSWORD="${LOCKSS_MAILHUB_PASSWORD}"
LOCKSS_EMAIL="${LOCKSS_EMAIL}"
LOCKSS_PROPS_URL="${LOCKSS_PROPS_URL}"
LOCKSS_PROPS_PROXY="${LOCKSS_PROPS_PROXY}"
LOCKSS_PROPS_SERVER_AUTHENTICATE_KEYSTORE="${LOCKSS_PROPS_SERVER_AUTHENTICATE_KEYSTORE}"
LOCKSS_PRESERVATION_GROUP="${LOCKSS_PRESERVATION_GROUP}"
LOCKSS_DATA_DIR="${LOCKSS_DATA_DIR}"
LOCKSS_LOGS_DIR="${LOCKSS_LOGS_DIR}"
LOCKSS_ADMIN_USER="${LOCKSS_ADMIN_USER}"
LOCKSS_ADMIN_PASSWD="${LOCKSS_ADMIN_PASSWD}"
LOCKSS_DB_PASSWD="${LOCKSS_DB_PASSWD}"
LOCKSS_PROXY_PORT="${LOCKSS_PROXY_PORT}"
LOCKSS_TMPDIR="${LOCKSS_TMPDIR}"
LOCKSS_POSTGRES_HOST="${LOCKSS_POSTGRES_HOST:=$LOCKSS_HOSTNAME}"
LOCKSS_POSTGRES_PORT="${LOCKSS_POSTGRES_PORT:=5432}"
LOCKSS_POSTGRES_USER="${LOCKSS_POSTGRES_USER:=LOCKSS}"
LOCKSS_POSTGRES_SCHEMA="${LOCKSS_POSTGRES_SCHEMA:=LOCKSS}"
LOCKSS_DBNAME_PREFIX="${LOCKSS_DBNAME_PREFIX:=Lockss}"
LOCKSS_SOLR_HOST="${LOCKSS_SOLR_HOST:=$LOCKSS_HOSTNAME}"
LOCKSS_SOLR_PORT=${LOCKSS_SOLR_PORT:=8983}
LOCKSS_SOLR_CORE_REPO="${LOCKSS_SOLR_CORE_REPO:=lockss-repo}"
LOCKSS_CLEAR_TMPDIR="${LOCKSS_CLEAR_TMPDIR:-yes}"
USE_LOCKSS_CFG="${USE_LOCKSS_CFG:-true}"
USE_LOCKSS_MDQ="${USE_LOCKSS_MDQ:-true}"
USE_LOCKSS_MDX="${USE_LOCKSS_MDX:-true}"
USE_LOCKSS_POL="${USE_LOCKSS_POL:-true}"
USE_LOCKSS_REPO="${USE_LOCKSS_REPO:-true}"
USE_LOCKSS_POSTGRES="${USE_LOCKSS_POSTGRES:-true}"
USE_LOCKSS_SOLR="${USE_LOCKSS_SOLR:-true}"
USE_LOCKSS_HDFS="${USE_LOCKSS_HDFS:-false}"
USE_LOCKSS_PYWB="${USE_LOCKSS_PYWB:-true}"
USE_LOCKSS_OPENWB="${USE_LOCKSS_OPENWB:-false}"
EOF
}

###
# Start
###
# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT"  INT

# MAIN ENTRY POINT
# Sanity checks
msg "${PROGNAME}: Checking system..."
am_i_root || err_exit "This script must be run as root."

Check_Runnable

msg "${PROGNAME}: loading existing system config info..."
if [ -r "${SYSTEM_CONF_FILE}" ]; then
  msg "${PROGNAME}: Setting defaults from existing config: ${SYSTEM_CONF_FILE}"
  msg "${PROGNAME}: You appear to be have run this script already.  Checking for missing configuration values..."
  read_config ${SYSTEM_CONF_FILE}
elif [ -r "${OLD_SYSTEM_CONF_FILE}" ]; then
  msg "${PROGNAME}: Setting defaults from existing config: ${OLD_SYSTEM_CONF_FILE}"
  read_config "${OLD_SYSTEM_CONF_FILE}"
  LOCKSS_PRESERVATION_GROUP=${LOCKSS_TEST_GROUP}
  LOCKSS_POSTGRES_HOST=${LOCKSS_HOSTNAME}
  LOCKSS_POSTGRES_PORT=5432
  LOCKSS_POSTGRES_USER="LOCKSS"
  LOCKSS_POSTGRES_SCHEMA=${LOCKSS_POSTGRES_USER}
  LOCKSS_DBNAME_PREFIX="Lockss"
  LOCKSS_SOLR_HOST=${LOCKSS_HOSTNAME}
  LOCKSS_SOLR_PORT='8983'
  LOCKSS_SOLR_CORE_REPO="lockss-repo"
fi

echo "  ---------------------------  "
msg "${PROGNAME}: writing updated system cfg..."
write_sysconf

echo "  ---------------------------  "
msg "${PROGNAME}: shutting down alpha stacks..."
"${SCRIPTS_DIR}/shutdown-lockss" && sleep 10 && msg "alpha1 stacks successfully shutdown."

echo "  ---------------------------  "
msg "${PROGNAME}: Checking persistent storage directories..."
rename_dirs

echo "  ---------------------------  "
msg "${PROGNAME}: checking for postgres changes..."
update_sql || err_msg "Attempt to update sql failed."

echo "  ---------------------------  "
msg "${PROGNAME}: Uninstalling all lockss docker elements"
"${SCRIPTS_DIR}/uninstall-lockss  && msg "${PROGNAME}: Done uninstalling LOCKSS docker elements""
sleep 10

echo "  ---------------------------  "
msg "${PROGNAME}: Checking solr indices for update..."
"${SCRIPTS_DIR}/update-alpha1-solr" || err_msg "Your solr instance needs to be checked."

echo "  ---------------------------  "
msg "${PROGNAME}: Update complete."
msg "${PROGNAME}: Call configure-lockss to check configuration settings."

graceful_exit