#!/usr/bin/env bash
# ---------------------------------------------------------------------------
# generate-lockss - Generate files needed to run a LOCKSS stack
#
# Copyright (c) 2000-2019, Board of Trustees of Leland Stanford Jr. University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Usage: generate-lockss [-h|--help] <num stacks>
#
# Revision history:
# 2019-04-18 version 1
# ---------------------------------------------------------------------------
PROGNAME=${0##*/}
VERSION="1.0"

##
## Relative paths
##
_0=$(basename "${0}")
_D0=$(dirname "${0}")

##
## Load _util
##
. "${_D0}/_util"
. "${_D0}/lib/mo"
##
## Definitions
##

# Directories
COMPOSE_DIR="$(cd "${_D0}/.." >/dev/null 2>&1 && pwd)"
echo "Setting Compose Dir: ${COMPOSE_DIR}"

CONFIG_DIR="${COMPOSE_DIR}/config"
DOCKER_CONFIGS_DIR="${CONFIG_DIR}/configs"
TEMPLATES_DIR="${CONFIG_DIR}/templates"
USEROPTS_DIR="${CONFIG_DIR}/useropts"
SERVICES_DIR="${TEMPLATES_DIR}/svcs"
MK_DIR="${TEMPLATES_DIR}/mk"
# Files
ENV_TMPL="${CONFIG_DIR}/env.mustache"
COMPOSE_TMPL="${CONFIG_DIR}/docker-compose.mustache"
SYSTEM_CONF_FILE="${CONFIG_DIR}/system.cfg"
STORAGE_CLASS_FILE="local-storage.yaml"

STACK_PREFIX="lockss-stack"
PORT_BASE=245

# Variables
declare -i STACK_COUNT=1
declare -a secrets=("lockss-ui-pass" "lockss-auth" "lockss-postgres-pass")

clean_up() { # Perform pre-exit housekeeping
  return
}

error_exit() {
  echo -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
  clean_up
  exit 1
}

graceful_exit() {
  clean_up
  exit
}

signal_exit() { # Handle trapped signals
  case $1 in
  INT)
    error_exit "Program interrupted by user"
    ;;
  TERM)
    echo -e "\n$PROGNAME: Program terminated" >&2
    graceful_exit
    ;;
  *)
    error_exit "$PROGNAME: Terminating on unknown signal"
    ;;
  esac
}

usage() {
  echo -e "Usage: $PROGNAME [-h|--help] [<num stacks>]"
}

help_message() {
  cat <<-_EOF_
  $PROGNAME ver. $VERSION
  Generate files needed to run a LOCKSS stack.

  $(usage)

  Options:
  -h, --help  Display this help message and exit.
  <num stacks> Optional number of stacks to run on this host.

_EOF_
  return
}

##
## MAIN
##

# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT" INT

# Parse command-line
while [[ -n $1 ]]; do
  case $1 in
  -h | --help)
    help_message
    graceful_exit
    ;;
  [1-9])
    STACK_COUNT=$1
    ;;
  -* | --*)
    usage
    error_exit "Unknown option $1"
    ;;
  *)
    echo "Argument $1 to process..."
    ;;
  esac
  shift
done

# Source system config file
set -a
. "${SYSTEM_CONF_FILE}"
set +a

if $(am_i_root); then
  error_exit "This script should not be run as root. Run as the lockss user."
fi

msg "${PROGNAME}:  Removing old config files..."
rm -rf "${DOCKER_CONFIGS_DIR}"

msg "${PROGNAME}:  Generating config files for $STACK_COUNT stacks..."
for ((num = 1; num <= $STACK_COUNT; num++)); do
  export STACK_PORT_BASE=$((${PORT_BASE} + $num))
  if [ ${STACK_COUNT} = 1 ]; then
    STACK_NAME="${STACK_PREFIX}"
  else
    STACK_NAME="${STACK_PREFIX}$num"
  fi
  export STACK_NAME
  export STACK_LCAP_PORT=$((${LOCKSS_V3_PORT} + $num - 1))
  export STACK_CONFIG_DIR="${DOCKER_CONFIGS_DIR}/${STACK_NAME}"
  stack_env_file="${STACK_CONFIG_DIR}/env.sh"
  stack_compose_file="${STACK_CONFIG_DIR}/docker-compose.yml"

  msg "${PROGNAME}: Stack ${num} named ${STACK_NAME} is using port base of ${STACK_PORT_BASE}."
  mkdir -p "${STACK_CONFIG_DIR}"

  msg "${PROGNAME}: Generating the stack env.sh file..."
  mo "${ENV_TMPL}" >"${stack_env_file}"
  set -a
  . "${stack_env_file}"
  set +a

  export POSTGRES_PASSWD="{{ secret \"lockss-postgres-pass\" }}"

  declare -a REPO_NUMS
  REPO_NUMS[0]=""
  IFS=';' read -r -a datadirs <<<"${LOCKSS_REPO_CONTAINER_DIRS}"
  len=${#datadirs[@]}
  export REPO_DATA_MAP=${MK_DATA_ROOT}
  for ((count = 1; count < $len; count++)); do
    REPO_NUMS[${count}]="$count"
    export REPO_DATA_MAP_${count}="/data${datadirs[$count]}"
  done
  export REPO_NUMS
  #mo -e -s="${stack_env_file}" "${COMPOSE_TMPL}" > "${stack_compose_file}"

  msg "${PROGNAME}: add the service deployments..."
  mkdir "${STACK_CONFIG_DIR}/svcs"
  for f in ${SERVICES_DIR}/*.mustache; do
    src="${f}"
    dst="${STACK_CONFIG_DIR}/svcs/$(basename "${f}" .mustache).yaml"
    msg "     Rendering ${src} to ${dst}..."
    mo "${src}" >"${dst}"
  done
  msg "${PROGNAME}: Adding the microk8s elements..."
  mk_dst="${STACK_CONFIG_DIR}/mk"
  mkdir "${mk_dst}"
  cp "${MK_DIR}/${STORAGE_CLASS_FILE}" "${mk_dst}/${STORAGE_CLASS_FILE}"
  for f in ${MK_DIR}/*.mustache; do
    src="${f}"
    dst="${mk_dst}/$(basename "${f}" .mustache).yaml"
    msg "     Rendering ${src} to ${dst}..."
    mo "${src}" >"${dst}"
  done
  msg "${PROGNAME}: Adding the lockss config files..."
  for f in ${TEMPLATES_DIR}/*.mustache; do
    src="${f}"
    dst="${STACK_CONFIG_DIR}/$(basename "${f}" .mustache)"
    msg "     Rendering ${src} to ${dst}..."
    mo "${src}" >"${dst}"
  done
  msg "${PROGNAME}:  Adding the user config files..."
  for f in ${USEROPTS_DIR}/templates/*_opt.mustache; do
    if [[ -f "${f}" ]]; then
      src="${f}"
      dst="${STACK_CONFIG_DIR}/$(basename "${f}" _opt.mustache)-opt"
      msg "     Rendering ${src} to ${dst}..."
      mo "${src}" >"${dst}"
    fi
  done
  msg "${PROGNAME}: Copying user opts..."
  for f in ${USEROPTS_DIR}/*_opt; do
    if [[ -f "${f}" ]]; then
      src="${f}"
      dst="${STACK_CONFIG_DIR}/$(basename "${f}" _opt)-opt"
      msg "     Copying ${src} to ${dst}..."
      cp "${src}" "${dst}"
    fi
  done
done

msg "${PROGNAME}:  Done updating configs."

graceful_exit
