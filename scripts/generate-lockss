#!/bin/bash
# ---------------------------------------------------------------------------
# generate-lockss - Generate files needed to run a LOCKSS stack
#
# Copyright (c) 2000-2019, Board of Trustees of Leland Stanford Jr. University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Usage: generate-lockss [-h|--help] <num stacks>
#
# Revision history:
# 2019-04-18 version 1
# ---------------------------------------------------------------------------
PROGNAME=${0##*/}
VERSION="1.0"

##
## Relative paths
##
_0=$(basename "${0}")
_D0=$(dirname "${0}")

##
## Definitions
##

# Directories
COMPOSE_DIR="${_D0}/.."
CONFIG_DIR="${_D0}/../config"
DOCKER_CONFIGS_DIR="${CONFIG_DIR}/configs"
TEMPLATES_DIR="${CONFIG_DIR}/templates"
USEROPTS_DIR="${CONFIG_DIR}/useropts"
PORT_BASE=245

# Files
ENV_FILE="${CONFIG_DIR}/env.mustache"
USER_CONF_FILE="${CONFIG_DIR}/config.info"

# Variables
declare -i STACK_COUNT=1
STACK_PREFIX="lockss-stack"

clean_up() { # Perform pre-exit housekeeping
	return
}

error_exit() {
	echo -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
	clean_up
	exit 1
}

graceful_exit() {
	clean_up
	exit
}

signal_exit() { # Handle trapped signals
	case $1 in
		INT)
			error_exit "Program interrupted by user" ;;
		TERM)
			echo -e "\n$PROGNAME: Program terminated" >&2
			graceful_exit ;;
		*)
			error_exit "$PROGNAME: Terminating on unknown signal" ;;
	esac
}

usage() {
	echo -e "Usage: $PROGNAME [-h|--help] [<num stacks>]"
}

help_message() {
  cat <<- _EOF_
  $PROGNAME ver. $VERSION
  Generate files needed to run a LOCKSS stack.

  $(usage)

  Options:
  -h, --help  Display this help message and exit.
  <num stacks> Optional number of stacks to run on this host.

_EOF_
  return
}
##
## MAIN
##

# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT"  INT

# Parse command-line
while [[ -n $1 ]]; do
  case $1 in
    -h | --help)
      help_message; graceful_exit ;;
    [1-9])
      STACK_COUNT=$1;;
    -* | --*)
      usage
      error_exit "Unknown option $1" ;;
    *)
      echo "Argument $1 to process..." ;;
  esac
  shift
done

# Source user-config
set -a
. "${CONFIG_DIR}/config.info"
set +a


echo "$(date) Removing old config files..."
rm -rf "${DOCKER_CONFIGS_DIR}"
echo "$(date) Generating config files for $STACK_COUNT stacks..."
for (( num=1 ; num<=$STACK_COUNT ; num++)); do
  stack_port_base=$((${PORT_BASE} + $num))
  stack_name="${STACK_PREFIX}$num"
  stack_config_dir="${DOCKER_CONFIGS_DIR}/${stack_name}"
  stack_env_file="${stack_config_dir}/env.sh"
  stack_lcap_port=$((${LOCKSS_V3_PORT} + $num -1))

  echo "Stack ${num} named ${stack_name} is using port base of ${stack_port_base}."
  mkdir -p ${stack_config_dir}
  #generate the env files.
  pystache "${ENV_FILE}" "{\"STACK_PORT_BASE\":\"$stack_port_base\", \"STACK_NAME\":\"$stack_name\", \"STACK_LCAP_PORT\":\"$stack_lcap_port\"}" > "${stack_env_file}"
  #add the lockss config file templates
  for f in ${CONFIG_DIR}/templates/*.mustache ; do
    src="${f}"
    dst="${stack_config_dir}/$(basename "${f}" .mustache)"
    echo "$(date) Rendering ${src} to ${dst}..."
    pystache "${src}" "$("${_D0}/env2json" "${USER_CONF_FILE}" "${stack_env_file}")" > "${dst}"
  done
  #add the user config file templates
  for f in ${USEROPTS_DIR}/templates/*_opt.mustache ; do
    if [[ -f "${f}" ]]; then
      src="${f}"
      dst="${stack_config_dir}/$(basename "${f}" .mustache)"
      echo "$(date) Rendering ${src} to ${dst}..."
      pystache "${src}" "$("${_D0}/env2json" "${USER_CONF_FILE}" "${stack_env_file}")" > "${dst}" 
    fi
  done
  #add any remaining user opt files
  for f in ${USEROPTS_DIR}/*_opt ; do
    if [[ -f "${f}" ]]; then
      src="${f}"
      dst="${stack_config_dir}/$(basename "$f")"
      echo "$(date) Copying ${src} to ${dst}..."
      cp "${src}" "${dst}"
    fi
  done
done

echo "$(date) Done updating configs."

graceful_exit
