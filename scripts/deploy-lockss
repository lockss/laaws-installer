#!/usr/bin/env bash
# ---------------------------------------------------------------------------
# deploy-lockss - Collect host system information needed to run a LOCKSS stack
#
# Copyright (c) 2000-2019, Board of Trustees of Leland Stanford Jr. University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Usage: deploy-lockss [-h|--help]

# Revision history:
# 2019-04-18 version 1
# ---------------------------------------------------------------------------
PROGNAME=${0##*/}
VERSION="1.0"

##
## Relative paths
##

_0=$(basename "${0}")
_D0=$(dirname "${0}")

##
## Load _util
##

. "${_D0}/_util"

##
## Definitions
##

# Directories
COMPOSE_DIR="$( cd "${_D0}/.." >/dev/null 2>&1 && pwd )"
echo "Setting Compose Dir: ${COMPOSE_DIR}"
CONFIG_DIR="${COMPOSE_DIR}/config"
DOCKER_CONFIGS_DIR="${CONFIG_DIR}/configs"
TEMPLATES_DIR="${CONFIG_DIR}/templates"

# Files
DOCKER_COMPOSE_FILE="docker-compose.yml"
SYSTEM_CONF_FILE="${CONFIG_DIR}/system.cfg"

#Data
declare -a arr global_confs=("lockss-cluster" "lockss-bootstrap" "repo_properties")
declare -a arr deploy_service_names
declare -a arr svcs
STACK_PREFIX="lockss-stack"

clean_up() { # Perform pre-exit housekeeping
  return
}

error_exit() {
  echo -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
  clean_up
  exit 1
}

graceful_exit() {
  clean_up
  exit
}

signal_exit() { # Handle trapped signals
  case $1 in
  INT)
    error_exit "Program interrupted by user"
    ;;
  TERM)
    echo -e "\n$PROGNAME: Program terminated" >&2
    graceful_exit
    ;;
  *)
    error_exit "$PROGNAME: Terminating on unknown signal"
    ;;
  esac
}

usage() {
  echo -e "Usage: $PROGNAME [-h|--help]"
}

help_message() {
  cat <<-_EOF_
  $PROGNAME ver. $VERSION
  Deploy the lockss stacks to docker.

  $(usage)

  Options:
  -h, --help  Display this help message and exit.
  -a, --args ARGS_ADDITIONAL  Add additional runtime options."
    Where 'ARGS_ADDITIONAL' is the additional arguments.

_EOF_
  return
}

#initialize the service arrays based on system.cfg info.
init_service_arrays() {
  if ${USE_LOCKSS_CFG}; then
    svcs+=("cfg")
    deploy_service_names+=("lockss-configuration-service")
  fi
  if ${USE_LOCKSS_MDQ}; then
    svcs+=("mdq")
    deploy_service_names+=("lockss-metadata-service")
  fi
  if ${USE_LOCKSS_MDX}; then
    svcs+=("mdx")
    deploy_service_names+=("lockss-metadata-extraction-service")
  fi
  if ${USE_LOCKSS_POL}; then
    svcs+=("pol")
    deploy_service_names+=("lockss-poller-service")
  fi
  if ${USE_LOCKSS_REPO}; then
    svcs+=("repo")
    deploy_service_names+=("lockss-repository-service")
  fi
  if ${USE_LOCKSS_POSTGRES}; then
    svcs+=("postgres")
    deploy_service_names+=("lockss-postgres-service")
  fi
  if ${USE_LOCKSS_SOLR}; then
    svcs+=("solr")
    deploy_service_names+=("lockss-solr-service")
  fi
  if ${USE_LOCKSS_HDFS}; then
    svcs+=("hdfs")
    deploy_service_names+=("lockss-hdfs-service")
  fi
  if ${USE_LOCKSS_PYWB}; then
    svcs+=("pywb")
    deploy_service_names+=("lockss-pywb-service")
  fi
  if ${USE_LOCKSS_OPENWB}; then
    svcs+=("openwayback")
    deploy_service_names+=("lockss-openwayback-service")
  fi
}

# Check our secrets
check_installed_secrets() {
  echo "checking installed secrets..."

  Check_Secret 'lockss-postgres-pass'
  Check_Secret 'lockss-ui-pass'
  Check_Secret 'lockss-auth'
}


check_installed_volumes() {
  local stack=$1
  # Check the mountpoints
  for svc in "${svcs[@]}"; do
    echo "checking docker mountpoints for $stack-${svc}..."
    Check_Volume "$stack-${svc}-data"
    Check_Volume "$stack-${svc}-logs"
  done
}

check_installed_network() {
  local stack=$1
  Check_Network "$stack-network"
}

# Deploy the stack with incoming stack num
deploy_stack() {
  local stack=${STACK_PREFIX}$1
  kubectl config set-context --current --namespace=${stack}

  # Source config.info and env.sh
  set -a
  . "${DOCKER_CONFIGS_DIR}/$stack/env.sh"
  set +a
  pushd . &>/dev/null
  cd "${DOCKER_CONFIGS_DIR}/$stack"
  for svc in "${deploy_service_names[@]}"; do
    echo "Deploying service from ${svc}..."
    kubectl apply -f "${svc}.yml"
  done
  popd &>/dev/null
}

##
## MAIN
##
# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT" INT

STACK_DIRS=(${DOCKER_CONFIGS_DIR}/*/)
NUM_STACKS=${#STACK_DIRS[@]}
STACK_NUM=0
ARGS_ADDITIONAL=""
# Parse command-line
while [[ -n $1 ]]; do
  case $1 in
  -h | --help)
    help_message
    graceful_exit
    ;;
  -a | --args)
    shift
    export ARGS_ADDITIONAL="$1"
    msg "Adding additional runtime args $ARGS_ADDITIONAL"
    shift
    ;;
  [1-9])
    STACK_NUM=$1
    ;;
  -* | --*)
    usage
    error_exit "Unknown option $1"
    ;;
  *)
    echo "Argument $1 to process..."
    ;;
  esac
  shift
done

set -a
. "${SYSTEM_CONF_FILE}"
set +a

if $(am_i_root); then
  error_exit "This script should not be run as root. Run as the lockss user."
fi

#Check_Runnable

init_service_arrays

if [ ${NUM_STACKS} -eq 0 ]; then
  error_exit "Unable to find generated stack info, run configure, generate and install first."
elif [ ${NUM_STACKS} -eq 1 ]; then
  deploy_stack ""
elif [ ${STACK_NUM} -eq 0 ]; then
  echo "Installing ${NUM_STACKS} stacks found in ${DOCKER_CONFIGS_DIR}"
  for ((num = 1; num <= $NUM_STACKS; num++)); do
    deploy_stack $num
  done
elif [ -e "${DOCKER_CONFIGS_DIR}/${STACK_PREFIX}${STACK_NUM}" ]; then
  deploy_stack ${STACK_NUM}
else
  error_exit "Unable to find generated stack info for ${STACK_NUM}"
fi

graceful_exit
