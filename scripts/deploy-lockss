#!/bin/bash

# Copyright (c) 2000-2019, Board of Trustees of Leland Stanford Jr. University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
##
## Relative paths
##

_0=$(basename "${0}")
_D0=$(dirname "${0}")

##
## Load _util
##

. "${_D0}/_util"

##
## Definitions
##

# Directories
COMPOSE_DIR="${_D0}/.."
CONFIG_DIR="${COMPOSE_DIR}/config"
DOCKER_CONFIGS_DIR="${CONFIG_DIR}/configs"
TEMPLATES_DIR="${CONFIG_DIR}/templates"

# Files
DOCKER_COMPOSE_FILE="${COMPOSE_DIR}/docker-compose.yml"

#Data
declare -a arr svcs=( "cfg" "mdq" "mdx" "pol" "repo" "postgres" "solr" "hdfs" "pywb")
declare -a arr global_confs=("lockss-cluster" "lockss-bootstrap" "repo_properties")
declare -a arr service_confs=("cfg" "mdq" "mdx" "pol")

STACK_PREFIX="lockss-stack"

# Check our secrets
check_installed_secrets
{
  echo "checking installed secrets..."
  Check_Secret 'lockss-postgres-pass'
  Check_Secret 'lockss-ui-pass'
}

# Check the global configs
check_installed_configs()
{
  local stack=$1

  for gconf in "${global_confs[@]}"
  do
  echo "checking installed configs for $stack-${gconf}..."
  Check_Config "$stack-${gconf}"
  done

  # Check the configs for each lockss service
  for sconf in "${service_confs[@]}"
  do
    echo "checking installed configs for $stack-${sconf}..."
    Check_Config "$stack-${sconf}-service"
    Check_Config "$stack-${sconf}-service_opt"
  done
}

check_installed_volumes()
{
  local stack=$1
 # Check the mountpoints
  for svc in "${svcs[@]}"
  do
    echo "checking docker mountpoints for $stack-${svc}..."
    Check_Volume "$stack-${svc}-data"
    Check_Volume "$stack-${svc}-logs"
  done
}

check_installed_network()
{
  local stack=$1
  Check_Network "$stack-network"
}

check_stack_installed()
{
  local stack=${STACK_PREFIX}$1

  echo "Checking installation for stack $stack..."
  check_installed_configs $stack
  check_installed_volumes $stack
  check_installed_network $stack
}

# Deploy the stack with incoming stack num
deploy_stack()
{
  local stack=${STACK_PREFIX}$1
  echo "Deploying to docker stack $stack..."
  # Source config.info and env.sh
  set -a
    . "${CONFIG_DIR}/config.info"
    . "${DOCKER_CONFIGS_DIR}/$stack/env.sh"
  set +a

  docker stack deploy --prune --compose-file ${DOCKER_COMPOSE_FILE} $stack
}

##
## MAIN
##

# Sanity checks
Check_Installed 'docker'
Check_Docker
Check_Stack
Check_LocalPersistPlugin

STACK_DIRS=(${DOCKER_CONFIGS_DIR}/*/)
NUM_STACKS=${#STACK_DIRS[@]}

if [[ NUM_STACKS -eq 0 ]]; then
  echo "Unable to find generated stack info, run configure, generate and install first."
  exit 1
elif [[ $# -eq 0 ]]; then
  echo "Installing ${NUM_STACKS} stacks found in ${DOCKER_CONFIGS_DIR}"
  for ((num=1 ; num <= $NUM_STACKS ; num++)); do
    check_stack_installed $num
    deploy_stack $num
  done
elif [[ -e "${DOCKER_CONFIGS_DIR}/${STACK_PREFIX}$1" ]]; then
    check_stack_installed $1
    deploy_stack $1
else
  echo "Unable to find generated stack info for $1"
  exit 1
fi
